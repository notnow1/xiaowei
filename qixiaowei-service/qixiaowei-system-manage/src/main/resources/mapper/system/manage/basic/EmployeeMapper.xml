<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.qixiaowei.system.manage.mapper.basic.EmployeeMapper">
    <!--    查询员工表-->
    <select id="selectEmployeeByEmployeeId"
            resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT c.country_name as nationality_name,
        n.nation_name,
        p.post_name as employee_post_name,
        d.department_name as employee_department_name,
        case
        when ors.rank_prefix_code is null then p.post_rank
        when ors.rank_prefix_code is not null
        then concat(ors.rank_prefix_code, p.post_rank) end as post_rank_name,
        ei.employee_info_id,
        ei.employee_id,
        ei.marital_status,
        ei.nationality,
        ei.nation,
        ei.resident_city,
        ei.insured_city,
        ei.permanent_address,
        ei.contact_address,
        ei.contact_address_detail,
        ei.wechat_code,
        ei.emergency_contact,
        ei.emergency_mobile,
        ors.rank_prefix_code,
        case
        when ors.rank_prefix_code is null then e.employee_rank
        when ors.rank_prefix_code is not null
        then concat(ors.rank_prefix_code, e.employee_rank) end as employee_rank_name,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        u.user_id,
        u.user_name
        FROM employee e
        left join employee_info ei on e.employee_id = ei.employee_id
        left join post p
        on p.post_id = e.employee_post_id
        and p.delete_flag = 0
        left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
        and ors.delete_flag = 0
        left join department d
        on d.department_id = e.employee_department_id
        and d.delete_flag = 0
        left join country c
        on REVERSE(SUBSTRING_INDEX(REVERSE(ei.nationality), ',', 1)) = c.country_id
        and c.delete_flag = 0
        left join nation n
        on ei.nation = n.nation_id
        and n.delete_flag = 0
        LEFT JOIN user u ON u.employee_id = e.employee_id AND u.delete_flag = 0
        WHERE e.employee_id = #{employeeId}
        and e.delete_flag = 0
    </select>

    <!--    查询员工表-->
    <select id="selectEmployeeByEmployeeCode"
            resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT employee_id,
        employee_code,
        employee_name,
        employee_gender,
        identity_type,
        identity_card,
        employee_birthday,
        employee_mobile,
        employee_email,
        employee_department_id,
        employee_post_id,
        employee_rank,
        employee_basic_wage,
        employment_date,
        departure_date,
        employment_status,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM employee
        WHERE employee_code = #{employeeCode}
        and delete_flag = 0
    </select>
    <!--    查询员工表列表-->
    <select id="selectEmployeeList" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
        DISTINCT
        ors.official_rank_system_name,
        c.country_name as nationality_name,
        n.nation_name,
        p.post_name as employee_post_name,
        p.post_code,
        p.official_rank_system_id,
        d.department_name as employee_department_name,
        d.department_code,
        case when ors.rank_prefix_code is null then e.employee_rank
        when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end as
        employee_rank_name,
        case
        when ors.rank_prefix_code is null then p.post_rank
        when ors.rank_prefix_code is not null
        then concat(ors.rank_prefix_code, p.post_rank) end as
        post_rank_name,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        e.create_by,
        e.create_time,
        ei.employee_info_id,
        ei.marital_status,
        ei.nationality,
        ei.nation,
        ei.resident_city,
        ei.insured_city,
        ei.permanent_address,
        ei.contact_address,
        ei.contact_address_detail,
        ei.wechat_code,
        ei.emergency_contact,
        ei.emergency_mobile
        from
        employee e
        left join employee_info ei
        on
        e.employee_id = ei.employee_id
        left join post p
        on p.post_id =e.employee_post_id
        and p.delete_flag =0
        left join department d
        on d.department_id = e.employee_department_id
        and d.delete_flag =0
        left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
        and ors.delete_flag = 0
        left join country c
        on REVERSE(SUBSTRING_INDEX(REVERSE(ei.nationality),',',1)) = c.country_id
        and c.delete_flag =0
        left join nation n
        on ei.nation = n.nation_id
        and n.delete_flag =0
        <if test="employee.residentCityName != null and employee.residentCityName != ''">
            left join region r
            on r.district_code=SUBSTRING_INDEX(ei.resident_city,',',-1)
            and r.delete_flag =0
        </if>
        <if test="employee.insuredCityName != null and employee.insuredCityName != ''">
            left join region r
            on r.district_code=SUBSTRING_INDEX(ei.insured_city ,',',-1)
            and r.delete_flag =0
        </if>
        <if test="employee.permanentAddressName != null and employee.permanentAddressName != ''">
            left join region r
            on r.district_code=SUBSTRING_INDEX(ei.permanent_address ,',',-1)
            and r.delete_flag =0
        </if>
        <if test="employee.contactAddressName != null and employee.contactAddressName != ''">
            left join region r
            on r.district_code=SUBSTRING_INDEX(ei.contact_address ,',',-1)
            and r.delete_flag =0
        </if>
        where
        e.delete_flag = 0
        <if test="employee.employeeIds  != null and employee.employeeIds.size()!=0">
            and e.employee_id in
            <foreach item="item"
                     collection="employee.employeeIds"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <!-- 员工工号过滤  -->
        <if test="employee.params.employeeCodeEqual != null and employee.params.employeeCodeEqual.size() > 0">
            AND e.employee_code IN
            <foreach item="item"
                     collection="employee.params.employeeCodeEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employeeCodeNotEqual != null and employee.params.employeeCodeNotEqual.size() > 0">
            AND (e.employee_code NOT IN
            <foreach item="item"
                     collection="employee.params.employeeCodeNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR e.employee_code IS NULL
            )
        </if>
        <if test="employee.params.employeeCodeLike != null and employee.params.employeeCodeLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.employeeCodeLike"
                     index="index" open="(" separator="AND" close=")">
                e.employee_code  LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <if test="employee.params.employeeCodeNotLike != null and employee.params.employeeCodeNotLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.employeeCodeNotLike"
                     index="index" open="(" separator="AND" close=")">
                e.employee_code  NOT LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <!-- 员工姓名过滤  -->
        <if test="employee.params.employeeNameEqual != null and employee.params.employeeNameEqual.size() > 0">
            AND e.employee_name IN
            <foreach item="item"
                     collection="employee.params.employeeNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employeeNameNotEqual != null and employee.params.employeeNameNotEqual.size() > 0">
            AND (e.employee_name NOT IN
            <foreach item="item"
                     collection="employee.params.employeeNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR e.employee_name IS NULL
            )
        </if>
        <if test="employee.params.employeeNameLike != null and employee.params.employeeNameLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.employeeNameLike"
                     index="index" open="(" separator="AND" close=")">
                e.employee_name  LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <if test="employee.params.employeeNameNotLike != null and employee.params.employeeNameNotLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.employeeNameNotLike"
                     index="index" open="(" separator="AND" close=")">
                e.employee_name  NOT LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <!-- 员工用工关系状态过滤  -->
        <if test="employee.params.employmentStatusEqual != null and employee.params.employmentStatusEqual.size() > 0">
            AND e.employment_status IN
            <foreach item="item"
                     collection="employee.params.employmentStatusEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employmentStatusNotEqual != null and employee.params.employmentStatusNotEqual.size() > 0">
            AND (e.employment_status NOT IN
            <foreach item="item"
                     collection="employee.params.employmentStatusNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR e.employment_status IS NULL
            )
        </if>
        <!-- 员工性别过滤  -->
        <if test="employee.params.employeeGenderEqual != null and employee.params.employeeGenderEqual.size() > 0">
            AND e.employee_gender IN
            <foreach item="item"
                     collection="employee.params.employeeGenderEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employeeGenderNotEqual != null and employee.params.employeeGenderNotEqual.size() > 0">
            AND (e.employee_gender NOT IN
            <foreach item="item"
                     collection="employee.params.employeeGenderNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            or e.employee_gender is null)
        </if>
        <!-- 员工身份证号过滤  -->
        <if test="employee.params.identityCardEqual != null and employee.params.identityCardEqual.size() > 0">
            AND e.identity_card IN
            <foreach item="item"
                     collection="employee.params.identityCardEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.identityCardNotEqual != null and employee.params.identityCardNotEqual.size() > 0">
            AND (e.identity_card NOT IN
            <foreach item="item"
                     collection="employee.params.identityCardNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR e.identity_card IS NULL
            )
        </if>
        <if test="employee.params.identityCardLike != null and employee.params.identityCardLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.identityCardLike"
                     index="index" open="(" separator="AND" close=")">
                e.identity_card  LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <if test="employee.params.identityCardNotLike != null and employee.params.identityCardNotLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.identityCardNotLike"
                     index="index" open="(" separator="AND" close=")">
                e.identity_card  NOT LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <!-- 出生日期过滤  -->
        <if test="employee.params.employeeBirthdayEqual != null and employee.params.employeeBirthdayEqual.size() > 0">
            AND e.employee_birthday IN
            <foreach item="item"
                     collection="employee.params.employeeBirthdayEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employeeBirthdayNotEqual != null and employee.params.employeeBirthdayNotEqual.size() > 0">
            AND (e.employee_birthday NOT IN
            <foreach item="item"
                     collection="employee.params.employeeBirthdayNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach> or e.employee_birthday is null)
        </if>
        <if test="employee.params.employeeBirthdayBefore != null and employee.params.employeeBirthdayBefore != ''">
            AND e.employee_birthday &lt; #{employee.params.employeeBirthdayBefore}
        </if>
        <if test="employee.params.employeeBirthdayNotBefore != null and employee.params.employeeBirthdayNotBefore != ''"><!-- 开始时间检索 -->
            AND e.employee_birthday &gt;= #{employee.params.employeeBirthdayNotBefore}
        </if>
        <if test="employee.params.employeeBirthdayAfter != null and employee.params.employeeBirthdayAfter != ''"><!-- 开始时间检索 -->
            AND e.employee_birthday &gt; #{employee.params.employeeBirthdayAfter}
        </if>
        <if test="employee.params.employeeBirthdayNotAfter != null and employee.params.employeeBirthdayNotAfter != ''"><!-- 结束时间检索 -->
            AND e.employee_birthday &lt;= #{employee.params.employeeBirthdayNotAfter}
        </if>
        <if test="employee.params.employeeBirthdayStart != null and employee.params.employeeBirthdayStart != ''"><!-- 开始时间检索 -->
            AND e.employee_birthday &gt;= #{employee.params.employeeBirthdayStart}
        </if>
        <if test="employee.params.employeeBirthdayEnd != null and employee.params.employeeBirthdayEnd != ''"><!-- 结束时间检索 -->
            AND e.employee_birthday &lt;= #{employee.params.employeeBirthdayEnd}
        </if>
        <!-- 员工婚姻状态过滤  -->
        <if test="employee.params.maritalStatusEqual != null and employee.params.maritalStatusEqual.size() > 0">
            AND ei.marital_status IN
            <foreach item="item"
                     collection="employee.params.maritalStatusEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.maritalStatusNotEqual != null and employee.params.maritalStatusNotEqual.size() > 0">
            AND (ei.marital_status NOT IN
            <foreach item="item"
                     collection="employee.params.maritalStatusNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR ei.marital_status IS NULL
            )
        </if>
        <!-- 员工国籍过滤  -->
        <if test="employee.params.nationalityNameEqual != null and employee.params.nationalityNameEqual.size() > 0">
            AND c.country_name IN
            <foreach item="item"
                     collection="employee.params.nationalityNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.nationalityNameNotEqual != null and employee.params.nationalityNameNotEqual.size() > 0">
            AND (c.country_name NOT IN
            <foreach item="item"
                     collection="employee.params.nationalityNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR c.country_name IS NULL
            )
        </if>
        <!-- 员工民族过滤  -->
        <if test="employee.params.nationNameEqual != null and employee.params.nationNameEqual.size() > 0">
            AND n.nation_name IN
            <foreach item="item"
                     collection="employee.params.nationNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.nationNameNotEqual != null and employee.params.nationNameNotEqual.size() > 0">
            AND (n.nation_name NOT IN
            <foreach item="item"
                     collection="employee.params.nationNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR n.nation_name IS NULL
            )
        </if>
        <!-- 入职日期过滤  -->
        <if test="employee.params.employmentDateEqual != null and employee.params.employmentDateEqual.size() > 0">
            AND e.employment_date IN
            <foreach item="item"
                     collection="employee.params.employmentDateEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employmentDateNotEqual != null and employee.params.employmentDateNotEqual.size() > 0">
            AND (e.employment_date NOT IN
            <foreach item="item"
                     collection="employee.params.employmentDateNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach> or e.employment_date is null)
        </if>
        <if test="employee.params.employmentDateBefore != null and employee.params.employmentDateBefore != ''">
            AND e.employment_date &lt; #{employee.params.employmentDateBefore}
        </if>
        <if test="employee.params.employmentDateNotBefore != null and employee.params.employmentDateNotBefore != ''"><!-- 开始时间检索 -->
            AND e.employment_date &gt;= #{employee.params.employmentDateNotBefore}
        </if>
        <if test="employee.params.employmentDateAfter != null and employee.params.employmentDateAfter != ''"><!-- 开始时间检索 -->
            AND e.employment_date &gt; #{employee.params.employmentDateAfter}
        </if>
        <if test="employee.params.employmentDateNotAfter != null and employee.params.employmentDateNotAfter != ''"><!-- 结束时间检索 -->
            AND e.employment_date &lt;= #{employee.params.employmentDateNotAfter}
        </if>
        <if test="employee.params.employmentDateStart != null and employee.params.employmentDateStart != ''"><!-- 开始时间检索 -->
            AND e.employment_date &gt;= #{employee.params.employmentDateStart}
        </if>
        <if test="employee.params.employmentDateEnd != null and employee.params.employmentDateEnd != ''"><!-- 结束时间检索 -->
            AND e.employment_date &lt;= #{employee.params.employmentDateEnd}
        </if>
        <!-- 员工状态过滤  -->
        <if test="employee.params.statusEqual != null and employee.params.statusEqual.size() > 0">
            AND e.status IN
            <foreach item="item"
                     collection="employee.params.statusEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.statusNotEqual != null and employee.params.statusNotEqual.size() > 0">
            AND (e.status NOT IN
            <foreach item="item"
                     collection="employee.params.statusNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR e.status IS NULL
            )
        </if>
        <!-- 员工部门过滤  -->
        <if test="employee.params.employeeDepartmentNameEqual != null and employee.params.employeeDepartmentNameEqual.size() > 0">
            AND d.department_name IN
            <foreach item="item"
                     collection="employee.params.employeeDepartmentNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employeeDepartmentNameNotEqual != null and employee.params.employeeDepartmentNameNotEqual.size() > 0">
            AND (d.department_name NOT IN
            <foreach item="item"
                     collection="employee.params.employeeDepartmentNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR d.department_name IS NULL
            )
        </if>
        <!-- 员工岗位过滤  -->
        <if test="employee.params.employeePostNameEqual != null and employee.params.employeePostNameEqual.size() > 0">
            AND p.post_name IN
            <foreach item="item"
                     collection="employee.params.employeePostNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employeePostNameNotEqual != null and employee.params.employeePostNameNotEqual.size() > 0">
            AND (p.post_name NOT IN
            <foreach item="item"
                     collection="employee.params.employeePostNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR p.post_name IS NULL
            )
        </if>
        <!-- 员工职级体系名称过滤  -->
        <if test="employee.params.officialRankSystemNameEqual != null and employee.params.officialRankSystemNameEqual.size() > 0">
            AND ors.official_rank_system_name IN
            <foreach item="item"
                     collection="employee.params.officialRankSystemNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.officialRankSystemNameNotEqual != null and employee.params.officialRankSystemNameNotEqual.size() > 0">
            AND (ors.official_rank_system_name NOT IN
            <foreach item="item"
                     collection="employee.params.officialRankSystemNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR ors.official_rank_system_name IS NULL
            )
        </if>
        <!-- 员工岗位职级过滤  -->
        <if test="employee.params.postRankNameEqual != null and employee.params.postRankNameEqual.size() > 0">
            AND case when ors.rank_prefix_code is null then p.post_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, p.post_rank) end IN
            <foreach item="item"
                     collection="employee.params.postRankNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.postRankNameNotEqual != null and employee.params.postRankNameNotEqual.size() > 0">
            AND (case when ors.rank_prefix_code is null then p.post_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, p.post_rank) end NOT IN
            <foreach item="item"
                     collection="employee.params.postRankNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR case when ors.rank_prefix_code is null then p.post_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, p.post_rank)  end IS NULL
            )
        </if>
        <if test="employee.params.postRankNameLike != null and employee.params.postRankNameLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.postRankNameLike"
                     index="index" open="(" separator="AND" close=")">
                case when ors.rank_prefix_code is null then p.post_rank
                when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, p.post_rank) end LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <if test="employee.params.postRankNameNotLike != null and employee.params.postRankNameNotLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.postRankNameNotLike"
                     index="index" open="(" separator="AND" close=")">
                case when ors.rank_prefix_code is null then p.post_rank
                when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, p.post_rank) end NOT LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <!-- 员工个人职级过滤  -->
        <if test="employee.params.employeeRankNameEqual != null and employee.params.employeeRankNameEqual.size() > 0">
            AND case when ors.rank_prefix_code is null then e.employee_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end IN
            <foreach item="item"
                     collection="employee.params.employeeRankNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employeeRankNameNotEqual != null and employee.params.employeeRankNameNotEqual.size() > 0">
            AND (case when ors.rank_prefix_code is null then e.employee_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end NOT IN
            <foreach item="item"
                     collection="employee.params.employeeRankNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR case when ors.rank_prefix_code is null then e.employee_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end IS NULL
            )
        </if>
        <if test="employee.params.employeeRankNameLike != null and employee.params.employeeRankNameLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.employeeRankNameLike"
                     index="index" open="(" separator="AND" close=")">
                case when ors.rank_prefix_code is null then e.employee_rank
                when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end  LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <if test="employee.params.employeeRankNameNotLike != null and employee.params.employeeRankNameNotLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.employeeRankNameNotLike"
                     index="index" open="(" separator="AND" close=")">
                case when ors.rank_prefix_code is null then e.employee_rank
                when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end  NOT LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <!-- 基本工资过滤  -->
        <if test="employee.params.employeeBasicWageEqual != null and employee.params.employeeBasicWageEqual.size() > 0">
            AND e.employee_basic_wage IN
            <foreach item="item"
                     collection="employee.params.employeeBasicWageEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employeeBasicWageNotEqual != null and employee.params.employeeBasicWageNotEqual.size() > 0">
            AND (e.employee_basic_wage NOT IN
            <foreach item="item"
                     collection="employee.params.employeeBasicWageNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach> or (e.employee_basic_wage ='' or e.employee_basic_wage is null))
        </if>
        <if test="employee.params.employeeBasicWageNull != null">
            AND (e.employee_basic_wage is null or e.employee_basic_wage ='')
        </if>
        <if test="employee.params.employeeBasicWageNotNull != null">
            AND (e.employee_basic_wage is not null or e.employee_basic_wage != '')
        </if>
        <if test="employee.params.employeeBasicWageGreaterThan != null ">
            AND e.employee_basic_wage &gt;#{employee.params.employeeBasicWageGreaterThan}
        </if>
        <if test="employee.params.employeeBasicWageNotGreaterThan != null ">
            AND e.employee_basic_wage &lt;=#{employee.params.employeeBasicWageNotGreaterThan}
        </if>
        <if test="employee.params.employeeBasicWageLessThan != null ">
            AND e.employee_basic_wage &lt;#{employee.params.employeeBasicWageLessThan}
        </if>
        <if test="employee.params.employeeBasicWageNotLessThan != null ">
            AND e.employee_basic_wage &gt;=#{employee.params.employeeBasicWageNotLessThan}
        </if>
        <!-- 员工手机过滤  -->
        <if test="employee.params.employeeMobileEqual != null and employee.params.employeeMobileEqual.size() > 0">
            AND e.employee_mobile IN
            <foreach item="item"
                     collection="employee.params.employeeMobileEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employeeMobileNotEqual != null and employee.params.employeeMobileNotEqual.size() > 0">
            AND (e.employee_mobile NOT IN
            <foreach item="item"
                     collection="employee.params.employeeMobileNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR e.employee_mobile IS NULL
            )
        </if>
        <if test="employee.params.employeeMobileLike != null and employee.params.employeeMobileLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.employeeMobileLike"
                     index="index" open="(" separator="AND" close=")">
                e.employee_mobile  LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <if test="employee.params.employeeMobileNotLike != null and employee.params.employeeMobileNotLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.employeeMobileNotLike"
                     index="index" open="(" separator="AND" close=")">
                e.employee_mobile  NOT LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <!-- 邮箱过滤  -->
        <if test="employee.params.employeeEmailEqual != null and employee.params.employeeEmailEqual.size() > 0">
            AND e.employee_email IN
            <foreach item="item"
                     collection="employee.params.employeeEmailEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.employeeEmailNotEqual != null and employee.params.employeeEmailNotEqual.size() > 0">
            AND ( e.employee_email NOT IN
            <foreach item="item"
                     collection="employee.params.employeeEmailNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR e.employee_email = ''
            )
        </if>
        <if test="employee.params.employeeEmailLike != null and employee.params.employeeEmailLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.employeeEmailLike"
                     index="index" open="(" separator="OR" close=")">
                e.employee_email LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <if test="employee.params.employeeEmailNotLike != null and employee.params.employeeEmailNotLike.size() > 0">
            AND (
            <foreach item="item"
                     collection="employee.params.employeeEmailNotLike"
                     index="index" open="(" separator="AND" close=")">
                e.employee_email NOT LIKE concat('%', #{item}, '%')
            </foreach>
            OR e.employee_email = ''
            )
        </if>
        <if test="employee.params.employeeEmailNull != null">
            AND (e.employee_email = '' or e.employee_email is null)
        </if>
        <if test="employee.params.employeeEmailNotNull != null">
            AND (e.employee_email != '' or e.employee_email is not null)
        </if>
        <!-- 员工微信过滤  -->
        <if test="employee.params.wechatCodeEqual != null and employee.params.wechatCodeEqual.size() > 0">
            AND ei.wechat_code IN
            <foreach item="item"
                     collection="employee.params.wechatCodeEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.params.wechatCodeNotEqual != null and employee.params.wechatCodeNotEqual.size() > 0">
            AND ( ei.wechat_code NOT IN
            <foreach item="item"
                     collection="employee.params.wechatCodeNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR ei.wechat_code = ''
            )
        </if>
        <if test="employee.params.wechatCodeLike != null and employee.params.wechatCodeLike.size() > 0">
            AND
            <foreach item="item"
                     collection="employee.params.wechatCodeLike"
                     index="index" open="(" separator="OR" close=")">
                ei.wechat_code LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <if test="employee.params.wechatCodeNotLike != null and employee.params.wechatCodeNotLike.size() > 0">
            AND (
            <foreach item="item"
                     collection="employee.params.wechatCodeNotLike"
                     index="index" open="(" separator="AND" close=")">
                ei.wechat_code NOT LIKE concat('%', #{item}, '%')
            </foreach>
            OR ei.wechat_code = ''
            )
        </if>
        <if test="employee.params.wechatCodeNull != null">
            AND (ei.wechat_code = '' or ei.wechat_code is null)
        </if>
        <if test="employee.params.wechatCodeNotNull != null">
            AND (ei.wechat_code != '' or ei.wechat_code is not null)
        </if>

        <if test="employee.residentCityName != null and employee.residentCityName != ''">
            and concat(r.province_name, r.city_name, r.district_name) like '%${employee.residentCityName}%'
        </if>
        <if test="employee.insuredCityName != null and employee.insuredCityName != ''">
            and concat(r.province_name, r.city_name, r.district_name) like '%${employee.insuredCityName}%'
        </if>
        <if test="employee.permanentAddressName != null and employee.permanentAddressName != ''">
            and concat(r.province_name, r.city_name, r.district_name) like '%${employee.permanentAddressName}%'
        </if>
        <if test="employee.contactAddressName != null and employee.contactAddressName != ''">
            and concat(r.province_name, r.city_name, r.district_name) like '%${employee.contactAddressName}%'
        </if>
        <if test="employee.employeeDepartmentName != null and employee.employeeDepartmentName != ''">
            and d.department_name like '%${employee.employeeDepartmentName}%'
        </if>
        <if test="employee.employeePostName != null and employee.employeePostName != ''">
            and p.post_name like '%${employee.employeePostName}%'
        </if>
        <if test="employee.postRankName != null and employee.postRankName != ''">
            and case when ors.rank_prefix_code is null then p.post_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, p.post_rank) end
            like '%${employee.postRankName}%'
        </if>
        <if test="employee.employeeRankName != null and employee.employeeRankName != ''">
            and case when ors.rank_prefix_code is null then e.employee_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end
            like '%${employee.employeeRankName}%'
        </if>
        <if test="employee.employeeId != null">
            and e.employee_id like '%${employee.employeeId}%'
        </if>
        <if test="employee.employeeCode != null and employee.employeeCode != ''">
            and e.employee_code like '%${employee.employeeCode}%'
        </if>
        <if test="employee.employeeName != null and employee.employeeName != ''">
            and e.employee_name like '%${employee.employeeName}%'
        </if>
        <if test="employee.employeeMobile != null and employee.employeeMobile != ''">
            and e.employee_mobile like '%${employee.employeeMobile}%'
        </if>
        <if test="employee.employeeEmail != null and employee.employeeEmail != ''">
            and e.employee_email like '%${employee.employeeEmail}%'
        </if>
        <if test="employee.employeeDepartmentId != null">
            and e.employee_department_id =#{employee.employeeDepartmentId}
        </if>
        <if test="employee.employeePostId != null">
            and e.employee_post_id like '%${employee.employeePostId}%'
        </if>
        <if test="employee.employeeRank != null">
            and e.employee_rank like '%${employee.employeeRank}%'
        </if>
        <if test="employee.employeeBasicWage != null">
            and e.employee_basic_wage like '%${employee.employeeBasicWage}%'
        </if>
        <if test="employee.params.employmentDateStart != null">
            AND e.employment_date &gt;=
            #{employee.params.employmentDateStart}
        </if>
        <if test="employee.params.employmentDateEnd != null">
            AND e.employment_date &lt;= #{employee.params.employmentDateEnd}
        </if>
        <if test="employee.params.departureDateStart != null">
            AND e.departure_date &gt;= #{employee.params.departureDateStart}
        </if>
        <if test="employee.params.departureDateEnd != null">
            AND e.departure_date &lt;= #{employee.params.departureDateEnd}
        </if>
        <if test="employee.employmentStatus != null">
            and e.employment_status like '%${employee.employmentStatus}%'
        </if>
        <if test="employee.status != null">
            and e.status =#{employee.status}
        </if>
        <if test="employee.employeeId != null">
            and ei.employee_info_id=#{employee.employeeId}
        </if>
        <if test="employee.employeeId != null">
            and ei.employee_id=#{employee.employeeId}
        </if>
        <if test="employee.maritalStatus != null">
            and ei.marital_status=#{employee.maritalStatus}
        </if>
        <if test="employee.nationality != null and employee.nationality != ''">
            and ei.nationality=#{employee.nationality}
        </if>
        <if test="employee.nation != null and employee.nation != ''">
            and ei.nation=#{employee.nation}
        </if>
        <if test="employee.residentCity != null and employee.residentCity != ''">
            and ei.resident_city=#{employee.residentCity}
        </if>
        <if test="employee.insuredCity != null and employee.insuredCity != ''">
            and ei.insured_city=#{employee.insuredCity}
        </if>
        <if test="employee.permanentAddress != null and employee.permanentAddress != ''">
            and ei.permanent_address=#{employee.permanentAddress}
        </if>
        <if test="employee.contactAddress != null and employee.contactAddress != ''">
            and ei.contact_address=#{employee.contactAddress}
        </if>
        <if test="employee.contactAddressDetail != null and employee.contactAddressDetail != ''">
            and ei.contact_address_detail=#{employee.contactAddressDetail}
        </if>
        <if test="employee.wechatCode != null and employee.wechatCode != ''">
            and ei.wechat_code=#{employee.wechatCode}
        </if>
        <if test="employee.emergencyContact != null and employee.emergencyContact != ''">
            and ei.emergency_contact=#{employee.emergencyContact}
        </if>
        <if test="employee.emergencyMobile != null and employee.emergencyMobile != ''">
            and ei.emergency_mobile=#{employee.emergencyMobile}
        </if>
    </select>

    <!--    通过部门，岗位，职级集合查询员工表-->
    <select id="selectEmployeeByPDRIds"
            resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT c.country_name as nationality_name,
        n.nation_name,
        p.post_name as employee_post_name,
        d.department_name as employee_department_name,
        case
        when ors.rank_prefix_code is null then p.post_rank
        when ors.rank_prefix_code is not null
        then concat(ors.rank_prefix_code, p.post_rank) end as post_rank_name,
        ei.employee_info_id,
        ei.employee_id,
        ei.marital_status,
        ei.nationality,
        ei.nation,
        ei.resident_city,
        ei.insured_city,
        ei.permanent_address,
        ei.contact_address,
        ei.contact_address_detail,
        ei.wechat_code,
        ei.emergency_contact,
        ei.emergency_mobile,
        case
        when ors.rank_prefix_code is null then e.employee_rank
        when ors.rank_prefix_code is not null
        then concat(ors.rank_prefix_code, e.employee_rank) end as employee_rank_name,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status
        FROM employee e
        left join employee_info ei on e.employee_id = ei.employee_id
        left join post p
        on p.post_id = e.employee_post_id
        and p.delete_flag = 0
        left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
        and ors.delete_flag = 0
        left join department d
        on d.department_id = e.employee_department_id
        and d.delete_flag = 0
        left join country c
        on REVERSE(SUBSTRING_INDEX(REVERSE(ei.nationality), ',', 1)) = c.country_id
        and c.delete_flag = 0
        left join nation n
        on ei.nation = n.nation_id
        and n.delete_flag = 0
        WHERE e.delete_flag = 0
        <if test="departmentIds != null and departmentIds.size() > 0">
            and d.department_id in
            <foreach collection="departmentIds" item="item" index="index" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="postIds != null and postIds.size() > 0">
            and p.post_id in
            <foreach collection="postIds" item="item" index="index" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
        <if test="employeeRankNames != null and employeeRankNames.size() > 0">
            and case when ors.rank_prefix_code is null then p.post_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, p.post_rank) end
            in
            <foreach collection="employeeRankNames" item="item" index="index" separator="," open="(" close=")">
                #{item}
            </foreach>
        </if>
    </select>

    <select id="unallocatedUserList" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag
        FROM employee e
        LEFT JOIN user u ON u.employee_id = e.employee_id AND u.delete_flag = 0
        WHERE e.delete_flag = 0
        AND u.user_id is null
        <if test="userId != null">
            OR u.user_id = #{userId}
        </if>
    </select>

    <!--    查询员工单条信息-->
    <select id="selectEmployee" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        ei.employee_info_id,
        ei.marital_status,
        ei.nationality,
        ei.nation,
        ei.resident_city,
        ei.insured_city,
        ei.permanent_address,
        ei.contact_address,
        ei.contact_address_detail,
        ei.wechat_code,
        ei.emergency_contact,
        ei.emergency_mobile
        from
        employee e
        left join employee_info ei
        on
        e.employee_id = ei.employee_id
        where
        delete_flag = 0
        <if test="employee.employeeId != null">
            and e.employee_id=#{employee.employeeId}
        </if>
    </select>

    <select id="selectEmployeeByEmployeeIds"
            resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT
        p.post_name as employee_post_name,
        p.post_code,
        d.department_name as employee_department_name,
        d.department_code,
        d.department_leader_id,
        case when ors.rank_prefix_code is null then p.post_rank
        when ors.rank_prefix_code is not null
        then concat(ors.rank_prefix_code, p.post_rank) end as
        post_rank_name,
        case when ors.rank_prefix_code is null then ee.employee_rank
        when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, ee.employee_rank) end as
        employee_rank_name,
        ee.employee_id, ee.employee_code, ee.employee_name, ee.employee_gender, ee.identity_type, ee.identity_card,
        ee.employee_birthday,
        ee.employee_mobile, ee.employee_email, ee.employee_department_id, ee.employee_post_id, ee.employee_rank,
        ee.employee_basic_wage,
        ee.employment_date, ee.departure_date, ee.employment_status, ee.status, ee.delete_flag, ee.create_by,
        ee.create_time, ee.update_by,
        ee.update_time,
        u.user_id,
        u2.user_id as sendUserId,
        u.user_name
        FROM employee ee
        left join post p
        on p.post_id =ee.employee_post_id
        and p.delete_flag =0
        left join department d
        on d.department_id = ee.employee_department_id
        and d.delete_flag =0
        left join official_rank_system ors
        on p.official_rank_system_id = ors.official_rank_system_id
        and ors.delete_flag = 0
        LEFT JOIN user u ON u.employee_id = ee.employee_id AND u.delete_flag = 0
        LEFT JOIN user u2 ON u2.employee_id = d.department_leader_id AND u2.delete_flag = 0
        WHERE ee.delete_flag=0
        AND ee.employee_id in
        <foreach item="item"
                 collection="employeeIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>

    <select id="getEmployeeCodes" resultType="java.lang.String">
        SELECT employee_code FROM employee WHERE delete_flag=0 AND employee_code LIKE CONCAT(#{prefixCodeRule},'%') ORDER BY employee_code ASC
    </select>

    <!--    批量查询是否被引用-->
    <select id="selectEmployeePostIds" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT
        employee_id, employee_code, employee_name, employee_gender, identity_type, identity_card, employee_birthday,
        employee_mobile, employee_email, employee_department_id, employee_post_id, employee_rank, employee_basic_wage,
        employment_date, departure_date, employment_status, status, delete_flag, create_by, create_time, update_by,
        update_time
        FROM employee
        WHERE employee_post_id in
        <foreach item="item"
                 collection="employeePostIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and delete_flag=0
    </select>
    <!--    查询是否被引用-->
    <select id="selectEmployeePostId" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select p.post_name as employee_post_name,
               ee.employee_id,
               d.department_name as employee_department_name,
               ee.employee_code,
               ee.employee_name,
               ee.employee_gender,
               ee.identity_type,
               ee.identity_card,
               ee.employee_birthday,
               ee.employee_mobile,
               ee.employee_email,
               ee.employee_department_id,
               ee.employee_post_id,
               ee.employee_rank,
               ee.employee_basic_wage,
               ee.employment_date,
               ee.departure_date,
               ee.employment_status,
               ee.status
        from  post p
                  left join  employee ee
                             on ee.employee_post_id = p.post_id
                                 and ee.delete_flag = 0
                  left join department d
                            on d.department_leader_post_id = p.post_id
                                and d.delete_flag = 0
        where p.post_id = #{employeePostId}
        and p.delete_flag = 0
    </select>
    <!--    根据code批量查询人员休息-->
    <select id="selectEmployeeByEmployeeCodes"
            resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT
        employee_id, employee_code, employee_name, employee_gender, identity_type, identity_card, employee_birthday,
        employee_mobile, employee_email, employee_department_id, employee_post_id, employee_rank, employee_basic_wage,
        employment_date, departure_date, employment_status, status, delete_flag, create_by, create_time, update_by,
        update_time
        FROM employee
        WHERE employee_code in
        <foreach item="item"
                 collection="employeeCodes"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and delete_flag=0
    </select>
    <!--    根据身份证号批量查询人员信息-->
    <select id="selectEmployeeByIdCards" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT
        employee_id, employee_code, employee_name, employee_gender, identity_type, identity_card, employee_birthday,
        employee_mobile, employee_email, employee_department_id, employee_post_id, employee_rank, employee_basic_wage,
        employment_date, departure_date, employment_status, status, delete_flag, create_by, create_time, update_by,
        update_time
        FROM employee
        WHERE identity_card in
        <foreach item="item"
                 collection="identityCards"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and delete_flag=0
    </select>
    <!--    根据code查询员工表列表-->
    <select id="selectCodeList" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT
        employee_id, employee_code, employee_name, employee_gender, identity_type, identity_card, employee_birthday,
        employee_mobile, employee_email, employee_department_id, employee_post_id, employee_rank, employee_basic_wage,
        employment_date, departure_date, employment_status, status, delete_flag, create_by, create_time, update_by,
        update_time
        FROM employee
        WHERE employee_code in
        <foreach item="item"
                 collection="employeeCodes"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and delete_flag=0
    </select>
    <!--    分页查询岗位薪酬报表-->
    <select id="selectPostSalaryReportList" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
        DISTINCT
        case when TIMESTAMPDIFF(month,e.employment_date,NOW())=0 then concat(1,'月')
        when TIMESTAMPDIFF(month,e.employment_date,NOW()) &lt;= 12 then
        concat(TIMESTAMPDIFF(month,e.employment_date,NOW()),'月')
        when TIMESTAMPDIFF(month,e.employment_date,NOW()) &gt; 12 then
        concat(FLOOR(TIMESTAMPDIFF(month,e.employment_date,NOW())/12),'年', case when
        TIMESTAMPDIFF(month,e.employment_date,NOW())%12=0 then '' when TIMESTAMPDIFF(month,e.employment_date,NOW())%12
        &gt; 0 then concat(TIMESTAMPDIFF(month,e.employment_date,NOW())%12,'月') end ) end as working_age,
        p.post_name as employee_post_name,
        p.post_code,
        e3.department_name as employee_department_name,
        e3.in_charge_name as in_charge,
        e3.department_leader_id,
        e3.department_code,
        ors.official_rank_system_name,
        ors.official_rank_system_id,
        case when ors.rank_prefix_code is null then e.employee_rank
        when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code,e.employee_rank) end as
        employee_rank_name,
        case when ors.rank_prefix_code is null then p.post_rank
        when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code,p.post_rank) end as post_rank_name,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        ei.employee_info_id,
        ei.marital_status,
        ei.nationality,
        ei.nation,
        ei.resident_city,
        ei.insured_city,
        ei.permanent_address,
        ei.contact_address,
        ei.contact_address_detail,
        ei.wechat_code,
        ei.emergency_contact,
        ei.emergency_mobile
        from
        employee e
        left join employee_info ei
        on
        e.employee_id = ei.employee_id
        left join post p
        on p.post_id =e.employee_post_id
        and p.delete_flag =0
        LEFT JOIN (
        SELECT
        d.department_id,
        d.department_leader_id,
        d.department_code,
        d.department_name,
        e2.employee_name AS in_charge_name
        FROM
        department d
        LEFT JOIN employee e2 ON d.department_leader_id = e2.employee_id
        AND e2.delete_flag = 0
        WHERE
        d.delete_flag = 0
        ) e3 ON e3.department_id = e.employee_department_id
        left join employee e2
        on e2.employee_id =e.employee_id
        and e2.delete_flag =0
        and e3.department_leader_id = e2.employee_id
        left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
        and ors.delete_flag = 0
        where
        e.delete_flag = 0
        <if test="employee.employeeId != null">
            and e.employee_id =#{employee.employeeId}
        </if>

        <if test="employee.employeeDepartmentId != null">
            and e.employee_department_id =#{employee.employeeDepartmentId}
        </if>
        <if test="employee.employeePostId != null">
            and e.employee_post_id =#{employee.employeePostId}
        </if>
        <if test="employee.employeeRankName != null and employee.employeeRankName != ''">
            and case when ors.rank_prefix_code is null then e.employee_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end
            =#{employee.employeeRankName}
        </if>
    </select>
    <!--    新增人力预算上年期末数集合-->
    <select id="selecTamountLastYearList" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT case
                   when ors.rank_prefix_code is null then e.employee_rank
                   when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end
                       as employeeRankName,
               case
                   when date_format(now(), '%Y') &lt; #{employee.planYear} then ifnull(sum(employment_status = 1),0)
                   when date_format(now(), '%Y') = #{employee.planYear} and date_format(now(), '%m') &gt; 0 and
                        date_format(now(), '%m') &lt; 7 then
                       ifnull(sum(case
                                      when date_format(employment_date, '%Y') = (#{employee.planYear} - 1)
                                          then employment_status = 1 end),0)
                   when date_format(now(), '%Y') = #{employee.planYear} and date_format(now(), '%m') &gt; 6 and
                        date_format(now(), '%m') &lt; 13 then ifnull(sum(employment_status = 1),0)
                   end as amountLastYear
        FROM employee e
                 left join post p
                           on p.post_id = e.employee_post_id
                               and p.delete_flag = 0
                 left join official_rank_system ors
                           on p.official_rank_system_id = ors.official_rank_system_id
                               and ors.delete_flag = 0
                               and p.official_rank_system_id = #{employee.officialRankSystemId}
        where e.employee_department_id = #{employee.employeeDepartmentId}
          and p.official_rank_system_id = #{employee.officialRankSystemId}
          and e.delete_flag = 0
        group by employeeRankName
    </select>
    <!--    根据部门 职级 获取人员信息集合-->
    <select id="selectByBudgeList" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT
        ors.official_rank_system_id,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        e.create_by,
        e.create_time,
        e.update_by,
        e.update_time
        FROM
        employee e
        left join post p
        on
        e.employee_post_id = p.post_id
        and p.delete_flag = 0
        left JOIN official_rank_system ors
        on
        ors.official_rank_system_id = p.official_rank_system_id
        AND ors.delete_flag =0
        WHERE e.delete_flag =0
        and e.employee_department_id in
        <foreach item="item"
                 collection="list[0]"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and ors.official_rank_system_id in
        <foreach item="item"
                 collection="list[1]"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    <!--    查询在职的所有员工-->
    <select id="selectDropDownEmployeeList" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT d.department_name as employee_department_name,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        e.create_by,
        e.create_time,
        e.update_by,
        e.update_time
        FROM employee e
        left join department d
        on e.employee_department_id = d.department_id
        and d.delete_flag = 0
        where e.delete_flag = 0
        and e.employment_status = 1
        and e.status = 1
    </select>
    <select id="selectByCodes" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        e.create_by,
        e.create_time,
        e.update_by,
        e.update_time
        FROM employee e
        left join post p
        on e.employee_post_id = p.post_id
        and p.delete_flag = 0
        left JOIN official_rank_system ors
        on ors.official_rank_system_id = p.official_rank_system_id
        AND ors.delete_flag =0
        WHERE e.delete_flag =0
        <if test="assessmentList.size() > 0">
            and e.employee_code in
            <foreach item="item"
                     collection="assessmentList"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
    </select>
    <!--    相同部门下 相同职级的 在职人数-->
    <select id="selectDepartmentAndOfficialRankSystem"
            resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT
        e.employee_id ,
        e.employee_department_id ,
        ors.official_rank_system_id,
        case
        when ors.rank_prefix_code is null then e.employee_rank
        when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end
        as employeeRankName,
        COUNT(e.employee_id) as annualAverageNum
        FROM
        employee e
        left join post p
        on p.post_id =e.employee_post_id
        and p.delete_flag =0
        left join official_rank_system ors
        on p.official_rank_system_id = ors.official_rank_system_id
        and ors.delete_flag = 0
        where e.delete_flag= 0
        and e.employment_status=1
        and e.employee_department_id IN
        <foreach item="item"
                 collection="departmentIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        group by employeeRankName
    </select>
    <!--    查询部门下所有人员-->
    <select id="selectEmployeeByDepts" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
        DISTINCT
        case when TIMESTAMPDIFF(month,e.employment_date,NOW())=0 then concat(1,'月')
        when TIMESTAMPDIFF(month,e.employment_date,NOW()) &lt;= 12 then
        concat(TIMESTAMPDIFF(month,e.employment_date,NOW()),'月')
        when TIMESTAMPDIFF(month,e.employment_date,NOW()) &gt; 12 then
        concat(FLOOR(TIMESTAMPDIFF(month,e.employment_date,NOW())/12),'年', case when
        TIMESTAMPDIFF(month,e.employment_date,NOW())%12=0 then '' when TIMESTAMPDIFF(month,e.employment_date,NOW())%12
        &gt; 0 then concat(TIMESTAMPDIFF(month,e.employment_date,NOW())%12,'月') end ) end as seniority,
        p.post_name as employee_post_name,
        p.post_code,
        d.department_name as employee_department_name,
        d.department_leader_id,
        d.examination_leader_id,
        e2.employee_name as examinationLeaderName,
        d.department_code,
        ors.official_rank_system_name,
        case when ors.rank_prefix_code is null then e.employee_rank
        when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code,e.employee_rank) end as
        employee_rank_name,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag
        from
        employee e
        left join post p
        on p.post_id =e.employee_post_id
        and p.delete_flag =0
        left join department d
        on d.department_id = e.employee_department_id
        and d.delete_flag =0
        left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
        and ors.delete_flag = 0
        left join  employee e2
        on d.examination_leader_id =e2.employee_id
        and e2.delete_flag =0
        where
        <if test="departmentId != null">
             find_in_set(#{departmentId}, d.ancestors) or d.department_id=#{departmentId}
        </if>
        and  e.delete_flag = 0
    </select>
    <!--    根据部门id查询员工表列表-->
    <select id="queryEmployeeByDept" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT employee_id,
        employee_code,
        employee_name,
        employee_gender,
        identity_type,
        identity_card,
        employee_birthday,
        employee_mobile,
        employee_email,
        employee_department_id,
        employee_post_id,
        employee_rank,
        employee_basic_wage,
        employment_date,
        departure_date,
        employment_status,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time,
        tenant_id
        FROM employee
        where delete_flag= 0
        and employment_status=1
        <if test="employeeDepartmentId != null">
            and employee_department_id=#{employeeDepartmentId}
        </if>
    </select>
    <!--    查询员工表列表(下拉框)-->
    <select id="selectDropEmployeeList" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
        DISTINCT
        c.country_name as nationality_name,
        n.nation_name,
        p.post_name as employee_post_name,
        p.post_code,
        p.official_rank_system_id,
        d.department_name as employee_department_name,
        d.department_code,
        case when ors.rank_prefix_code is null then e.employee_rank
        when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end as
        employee_rank_name,
        case
        when ors.rank_prefix_code is null then p.post_rank
        when ors.rank_prefix_code is not null
        then concat(ors.rank_prefix_code, p.post_rank) end as
        post_rank_name,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        ei.employee_info_id,
        ei.marital_status,
        ei.nationality,
        ei.nation,
        ei.resident_city,
        ei.insured_city,
        ei.permanent_address,
        ei.contact_address,
        ei.contact_address_detail,
        ei.wechat_code,
        ei.emergency_contact,
        ei.emergency_mobile
        from
        employee e
        left join employee_info ei
        on
        e.employee_id = ei.employee_id
        left join post p
        on p.post_id =e.employee_post_id
        and p.delete_flag =0
        left join department d
        on d.department_id = e.employee_department_id
        and d.delete_flag =0
        left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
        and ors.delete_flag = 0
        left join country c
        on REVERSE(SUBSTRING_INDEX(REVERSE(ei.nationality),',',1)) = c.country_id
        and c.delete_flag =0
        left join nation n
        on ei.nation = n.nation_id
        and n.delete_flag =0
        <if test="employee.residentCityName != null and employee.residentCityName != ''">
            left join region r
            on r.district_code=SUBSTRING_INDEX(ei.resident_city,',',-1)
            and r.delete_flag =0
        </if>
        <if test="employee.insuredCityName != null and employee.insuredCityName != ''">
            left join region r
            on r.district_code=SUBSTRING_INDEX(ei.insured_city ,',',-1)
            and r.delete_flag =0
        </if>
        <if test="employee.permanentAddressName != null and employee.permanentAddressName != ''">
            left join region r
            on r.district_code=SUBSTRING_INDEX(ei.permanent_address ,',',-1)
            and r.delete_flag =0
        </if>
        <if test="employee.contactAddressName != null and employee.contactAddressName != ''">
            left join region r
            on r.district_code=SUBSTRING_INDEX(ei.contact_address ,',',-1)
            and r.delete_flag =0
        </if>
        where
        e.delete_flag = 0
        and e.employment_status=1
        and e.status = 1
        <if test="employee.employeeIds  != null and employee.employeeIds.size()!=0">
            and e.employee_id in
            <foreach item="item"
                     collection="employee.employeeIds"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="employee.residentCityName != null and employee.residentCityName != ''">
            and concat(r.province_name, r.city_name, r.district_name) like '%${employee.residentCityName}%'
        </if>
        <if test="employee.insuredCityName != null and employee.insuredCityName != ''">
            and concat(r.province_name, r.city_name, r.district_name) like '%${employee.insuredCityName}%'
        </if>
        <if test="employee.permanentAddressName != null and employee.permanentAddressName != ''">
            and concat(r.province_name, r.city_name, r.district_name) like '%${employee.permanentAddressName}%'
        </if>
        <if test="employee.contactAddressName != null and employee.contactAddressName != ''">
            and concat(r.province_name, r.city_name, r.district_name) like '%${employee.contactAddressName}%'
        </if>
        <if test="employee.nationalityName != null and employee.nationalityName != ''">
            and c.country_name like '%${employee.nationalityName}%'
        </if>
        <if test="employee.nationName != null and employee.nationName != ''">
            and n.nation_name like '%${employee.nationName}%'
        </if>
        <if test="employee.employeeDepartmentName != null and employee.employeeDepartmentName != ''">
            and d.department_name like '%${employee.employeeDepartmentName}%'
        </if>
        <if test="employee.employeePostName != null and employee.employeePostName != ''">
            and p.post_name like '%${employee.employeePostName}%'
        </if>
        <if test="employee.postRankName != null and employee.postRankName != ''">
            and case when ors.rank_prefix_code is null then p.post_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, p.post_rank) end
            like '%${employee.postRankName}%'
        </if>
        <if test="employee.employeeRankName != null and employee.employeeRankName != ''">
            and case when ors.rank_prefix_code is null then e.employee_rank
            when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end
            like '%${employee.employeeRankName}%'
        </if>
        <if test="employee.employeeId != null">
            and e.employee_id like '%${employee.employeeId}%'
        </if>
        <if test="employee.employeeCode != null and employee.employeeCode != ''">
            and e.employee_code like '%${employee.employeeCode}%'
        </if>
        <if test="employee.employeeName != null and employee.employeeName != ''">
            and e.employee_name like '%${employee.employeeName}%'
        </if>
        <if test="employee.employeeGender != null">
            and e.employee_gender like '%${employee.employeeGender}%'
        </if>
        <if test="employee.identityType != null">
            and e.identity_type like '%${employee.identityType}%'
        </if>
        <if test="employee.identityCard != null and employee.identityCard != ''">
            and e.identity_card like '%${employee.identityCard}%'
        </if>

        <if test="employee.params.employmentDateStart != null">
            AND e.employee_birthday &gt;=
            #{employee.params.employeeBirthdayStart}
        </if>
        <if test="employee.params.employeeBirthdayEnd != null">
            AND e.employee_birthday &lt;=
            #{employee.params.employeeBirthdayEnd}
        </if>
        <if test="employee.employeeMobile != null and employee.employeeMobile != ''">
            and e.employee_mobile like '%${employee.employeeMobile}%'
        </if>
        <if test="employee.employeeEmail != null and employee.employeeEmail != ''">
            and e.employee_email like '%${employee.employeeEmail}%'
        </if>
        <if test="employee.employeeDepartmentId != null">
            and e.employee_department_id =#{employee.employeeDepartmentId}
        </if>
        <if test="employee.employeePostId != null">
            and e.employee_post_id like '%${employee.employeePostId}%'
        </if>
        <if test="employee.employeeRank != null">
            and e.employee_rank like '%${employee.employeeRank}%'
        </if>
        <if test="employee.employeeBasicWage != null">
            and e.employee_basic_wage like '%${employee.employeeBasicWage}%'
        </if>
        <if test="employee.params.employmentDateStart != null">
            AND e.employment_date &gt;=
            #{employee.params.employmentDateStart}
        </if>
        <if test="employee.params.employmentDateEnd != null">
            AND e.employment_date &lt;= #{employee.params.employmentDateEnd}
        </if>
        <if test="employee.params.departureDateStart != null">
            AND e.departure_date &gt;= #{employee.params.departureDateStart}
        </if>
        <if test="employee.params.departureDateEnd != null">
            AND e.departure_date &lt;= #{employee.params.departureDateEnd}
        </if>
        <if test="employee.employmentStatus != null">
            and e.employment_status like '%${employee.employmentStatus}%'
        </if>
        <if test="employee.status != null">
            and e.status =#{employee.status}
        </if>
        <if test="employee.employeeId != null">
            and ei.employee_info_id=#{employee.employeeId}
        </if>
        <if test="employee.employeeId != null">
            and ei.employee_id=#{employee.employeeId}
        </if>
        <if test="employee.maritalStatus != null">
            and ei.marital_status=#{employee.maritalStatus}
        </if>
        <if test="employee.nationality != null and employee.nationality != ''">
            and ei.nationality=#{employee.nationality}
        </if>
        <if test="employee.nation != null and employee.nation != ''">
            and ei.nation=#{employee.nation}
        </if>
        <if test="employee.residentCity != null and employee.residentCity != ''">
            and ei.resident_city=#{employee.residentCity}
        </if>
        <if test="employee.insuredCity != null and employee.insuredCity != ''">
            and ei.insured_city=#{employee.insuredCity}
        </if>
        <if test="employee.permanentAddress != null and employee.permanentAddress != ''">
            and ei.permanent_address=#{employee.permanentAddress}
        </if>
        <if test="employee.contactAddress != null and employee.contactAddress != ''">
            and ei.contact_address=#{employee.contactAddress}
        </if>
        <if test="employee.contactAddressDetail != null and employee.contactAddressDetail != ''">
            and ei.contact_address_detail=#{employee.contactAddressDetail}
        </if>
        <if test="employee.wechatCode != null and employee.wechatCode != ''">
            and ei.wechat_code=#{employee.wechatCode}
        </if>
        <if test="employee.emergencyContact != null and employee.emergencyContact != ''">
            and ei.emergency_contact=#{employee.emergencyContact}
        </if>
        <if test="employee.emergencyMobile != null and employee.emergencyMobile != ''">
            and ei.emergency_mobile=#{employee.emergencyMobile}
        </if>
    </select>
    <!--    远程 查询一级部门下所有的人员 返回部门id和职级体系id-->
    <select id="selectParentDepartmentIdAndOfficialRankSystem"
            resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
        DISTINCT
        ors.official_rank_system_id,
        p.post_name as employee_post_name,
        p.post_code,
        p.official_rank_system_id,
        d.department_name as employee_department_name,
        d.department_code,
        case when ors.rank_prefix_code is null then e.employee_rank
        when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end as
        employee_rank_name,
        case
        when ors.rank_prefix_code is null then p.post_rank
        when ors.rank_prefix_code is not null
        then concat(ors.rank_prefix_code, p.post_rank) end as
        post_rank_name,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        ei.employee_info_id,
        ei.marital_status,
        ei.nationality,
        ei.nation,
        ei.resident_city,
        ei.insured_city,
        ei.permanent_address,
        ei.contact_address,
        ei.contact_address_detail,
        ei.wechat_code,
        ei.emergency_contact,
        ei.emergency_mobile
        from
        employee e
        left join employee_info ei
        on
        e.employee_id = ei.employee_id
        left join post p
        on p.post_id =e.employee_post_id
        and p.delete_flag =0
        left join department d
        on d.department_id = e.employee_department_id
        and d.delete_flag =0
        left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
        and ors.delete_flag = 0
        where e.delete_flag =0
        and e.status =1
        and d.department_id IN
        <foreach item="item"
                 collection="departmentIdAll"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>
    <!--    远程查询在职所有人员-->
    <select id="getAll" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT employee_id,
        employee_code,
        employee_name,
        employee_gender,
        identity_type,
        identity_card,
        employee_birthday,
        employee_mobile,
        employee_email,
        employee_department_id,
        employee_post_id,
        employee_rank,
        employee_basic_wage,
        employment_date,
        departure_date,
        employment_status,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time,
        tenant_id
        FROM employee
        where delete_flag=0
        and status=1
    </select>
    <!--根据部门ID 集合查询人员-->
    <select id="selectEmployeeByDepartmentIds"
            resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        e.employee_rank,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        e.create_by,
        e.create_time,
        e.update_by,
        e.update_time,
        e.tenant_id
        FROM employee e
        WHERE e.delete_flag=0
        AND e.employee_department_id
        IN
        <foreach collection="departmentIds" open="(" close=")" separator="," index="index" item="item">
            #{item}
        </foreach>
    </select>
    <select id="selectUserList" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        SELECT e.employee_id,
        e.employee_code,
        e.employee_name,
        e.tenant_id,
        u.user_id,
        u.user_name
        FROM employee e
        LEFT JOIN user u ON u.employee_id = e.employee_id AND u.delete_flag = 0
        WHERE e.delete_flag = 0
        <if test="employee.employeeName != null and employee.employeeName != ''">
            and e.employee_name LIKE concat('%', #{employee.employeeName}, '%')
        </if>
    </select>
<!--    查询有账号的员工-->
    <select id="getUseEmployeeUser" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
            DISTINCT
            p.post_name as employee_post_name,
            p.post_code,
            p.official_rank_system_id,
            d.department_name as employee_department_name,
            d.department_code,
            case when ors.rank_prefix_code is null then e.employee_rank
                 when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end as
                employee_rank_name,
            case
                when ors.rank_prefix_code is null then p.post_rank
                when ors.rank_prefix_code is not null
                    then concat(ors.rank_prefix_code, p.post_rank) end as
                post_rank_name,
            e.employee_id,
            e.employee_code,
            e.employee_name,
            e.employee_gender,
            e.identity_type,
            e.identity_card,
            e.employee_birthday,
            e.employee_mobile,
            e.employee_email,
            e.employee_department_id,
            e.employee_post_id,
            e.employee_rank,
            e.employee_basic_wage,
            e.employment_date,
            e.departure_date,
            e.employment_status,
            e.status,
            e.delete_flag,
            ei.employee_info_id,
            ei.marital_status,
            ei.nationality,
            ei.nation,
            ei.resident_city,
            ei.insured_city,
            ei.permanent_address,
            ei.contact_address,
            ei.contact_address_detail,
            ei.wechat_code,
            ei.emergency_contact,
            ei.emergency_mobile
        from
            employee e
                inner join user u
                           on u.employee_id = e.employee_id
                               and  u.delete_flag=0
                left join employee_info ei
                          on
                              e.employee_id = ei.employee_id
                left join post p
                          on p.post_id =e.employee_post_id
                              and p.delete_flag =0
                left join department d
                          on d.department_id = e.employee_department_id
                              and d.delete_flag =0
                left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
                and ors.delete_flag = 0
        where e.delete_flag=0
        and e.employment_status =1
        and e.status =1
    </select>
<!--    根据部门ID 查询人员-->
    <select id="selectEmployeeByDepartmentId"
            resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
            DISTINCT
            p.post_name as employee_post_name,
            p.post_code,
            p.official_rank_system_id,
            d.department_name as employee_department_name,
            d.department_code,
            case when ors.rank_prefix_code is null then e.employee_rank
                 when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end as
                employee_rank_name,
            case
                when ors.rank_prefix_code is null then p.post_rank
                when ors.rank_prefix_code is not null
                    then concat(ors.rank_prefix_code, p.post_rank) end as
                post_rank_name,
            e.employee_id,
            e.employee_code,
            e.employee_name,
            e.employee_gender,
            e.identity_type,
            e.identity_card,
            e.employee_birthday,
            e.employee_mobile,
            e.employee_email,
            e.employee_department_id,
            e.employee_post_id,
            e.employee_rank,
            e.employee_basic_wage,
            e.employment_date,
            e.departure_date,
            e.employment_status,
            e.status,
            e.delete_flag,
            ei.employee_info_id,
            ei.marital_status,
            ei.nationality,
            ei.nation,
            ei.resident_city,
            ei.insured_city,
            ei.permanent_address,
            ei.contact_address,
            ei.contact_address_detail,
            ei.wechat_code,
            ei.emergency_contact,
            ei.emergency_mobile
        from
            employee e
                left join user u
                          on u.employee_id = e.employee_id
                              and  u.delete_flag=0
                left join employee_info ei
                          on
                              e.employee_id = ei.employee_id
                left join post p
                          on p.post_id =e.employee_post_id
                              and p.delete_flag =0
                left join department d
                          on d.department_id = e.employee_department_id
                              and d.delete_flag =0
                left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
                and ors.delete_flag = 0
        where e.delete_flag=0
          and e.employment_status =1
          and e.status =1
          and e.employee_department_id =#{departmentId}
    </select>
<!--    查询离职生效的员工-->
    <select id="getUseEmployeeStatus" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
            DISTINCT
            p.post_name as employee_post_name,
            p.post_code,
            p.official_rank_system_id,
            d.department_name as employee_department_name,
            d.department_code,
            case when ors.rank_prefix_code is null then e.employee_rank
                 when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end as
                employee_rank_name,
            case
                when ors.rank_prefix_code is null then p.post_rank
                when ors.rank_prefix_code is not null
                    then concat(ors.rank_prefix_code, p.post_rank) end as
                post_rank_name,
            e.employee_id,
            e.employee_code,
            e.employee_name,
            e.employee_gender,
            e.identity_type,
            e.identity_card,
            e.employee_birthday,
            e.employee_mobile,
            e.employee_email,
            e.employee_department_id,
            e.employee_post_id,
            e.employee_rank,
            e.employee_basic_wage,
            e.employment_date,
            e.departure_date,
            e.employment_status,
            e.status,
            e.delete_flag,
            ei.employee_info_id,
            ei.marital_status,
            ei.nationality,
            ei.nation,
            ei.resident_city,
            ei.insured_city,
            ei.permanent_address,
            ei.contact_address,
            ei.contact_address_detail,
            ei.wechat_code,
            ei.emergency_contact,
            ei.emergency_mobile
        from
            employee e
                left join user u
                           on u.employee_id = e.employee_id
                               and  u.delete_flag=0
                left join employee_info ei
                          on
                              e.employee_id = ei.employee_id
                left join post p
                          on p.post_id =e.employee_post_id
                              and p.delete_flag =0
                left join department d
                          on d.department_id = e.employee_department_id
                              and d.delete_flag =0
                left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
                and ors.delete_flag = 0
        where e.delete_flag=0
          and e.employment_status =0
          and e.status =0
    </select>
<!--    生效包含在职离职的员工-->
    <select id="getAllUseEmployee" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
            DISTINCT
            p.post_name as employee_post_name,
            p.post_code,
            p.official_rank_system_id,
            d.department_name as employee_department_name,
            d.department_code,
            case when ors.rank_prefix_code is null then e.employee_rank
                 when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code, e.employee_rank) end as
                employee_rank_name,
            case
                when ors.rank_prefix_code is null then p.post_rank
                when ors.rank_prefix_code is not null
                    then concat(ors.rank_prefix_code, p.post_rank) end as
                post_rank_name,
            e.employee_id,
            e.employee_code,
            e.employee_name,
            e.employee_gender,
            e.identity_type,
            e.identity_card,
            e.employee_birthday,
            e.employee_mobile,
            e.employee_email,
            e.employee_department_id,
            e.employee_post_id,
            e.employee_rank,
            e.employee_basic_wage,
            e.employment_date,
            e.departure_date,
            e.employment_status,
            e.status,
            e.delete_flag,
            ei.employee_info_id,
            ei.marital_status,
            ei.nationality,
            ei.nation,
            ei.resident_city,
            ei.insured_city,
            ei.permanent_address,
            ei.contact_address,
            ei.contact_address_detail,
            ei.wechat_code,
            ei.emergency_contact,
            ei.emergency_mobile
        from
            employee e
                left join user u
                          on u.employee_id = e.employee_id
                              and  u.delete_flag=0
                left join employee_info ei
                          on
                              e.employee_id = ei.employee_id
                left join post p
                          on p.post_id =e.employee_post_id
                              and p.delete_flag =0
                left join department d
                          on d.department_id = e.employee_department_id
                              and d.delete_flag =0
                left join official_rank_system ors on p.official_rank_system_id = ors.official_rank_system_id
                and ors.delete_flag = 0
        where e.delete_flag=0
          and e.status =1
    </select>
    <!--新增员工表-->
    <insert id="insertEmployee" useGeneratedKeys="true" keyProperty="employeeId">
        INSERT INTO employee (employee_code, employee_name, employee_gender, identity_type, identity_card,
        employee_birthday, employee_mobile, employee_email, employee_department_id,
        employee_post_id, employee_rank, employee_basic_wage, employment_date, departure_date,
        employment_status, status, delete_flag, create_by, create_time, update_by, update_time)
        VALUES (#{employee.employeeCode}, #{employee.employeeName}, #{employee.employeeGender},
        #{employee.identityType}, #{employee.identityCard}, #{employee.employeeBirthday},
        #{employee.employeeMobile}, #{employee.employeeEmail}, #{employee.employeeDepartmentId},
        #{employee.employeePostId}, #{employee.employeeRank}, #{employee.employeeBasicWage},
        #{employee.employmentDate}, #{employee.departureDate}, #{employee.employmentStatus}, #{employee.status},
        #{employee.deleteFlag}, #{employee.createBy}, #{employee.createTime}, #{employee.updateBy},
        #{employee.updateTime})
    </insert>
    <!--修改员工表-->
    <update id="updateEmployee">
        UPDATE employee
        SET
        <if test="employee.employeeCode != null and employee.employeeCode != ''">
            employee_code=#{employee.employeeCode},
        </if>
        <if test="employee.employeeName != null and employee.employeeName != ''">
            employee_name=#{employee.employeeName},
        </if>
        <if test="employee.employeeGender != null">
            employee_gender=#{employee.employeeGender},
        </if>
        <if test="employee.identityType != null">
            identity_type=#{employee.identityType},
        </if>
        <if test="employee.identityCard != null and employee.identityCard != ''">
            identity_card=#{employee.identityCard},
        </if>
        <if test="employee.employeeBirthday != null">
            employee_birthday=#{employee.employeeBirthday},
        </if>
        <if test="employee.employeeMobile != null and employee.employeeMobile != ''">
            employee_mobile=#{employee.employeeMobile},
        </if>
        <if test="employee.employeeEmail != null and employee.employeeEmail != ''">
            employee_email=#{employee.employeeEmail},
        </if>
        <if test="employee.employeeDepartmentId != null">
            employee_department_id=#{employee.employeeDepartmentId},
        </if>
        <if test="employee.employeePostId != null">
            employee_post_id=#{employee.employeePostId},
        </if>
        <if test="employee.employeeRank != null">
            employee_rank=#{employee.employeeRank},
        </if>
        <if test="employee.employeeBasicWage != null">
            employee_basic_wage=#{employee.employeeBasicWage},
        </if>
        <if test="employee.employmentDate != null">
            employment_date=#{employee.employmentDate},
        </if>
        <if test="employee.departureDate != null">
            departure_date=#{employee.departureDate},
        </if>
        <if test="employee.employmentStatus != null">
            employment_status=#{employee.employmentStatus},
        </if>
        <if test="employee.status != null">
            status=#{employee.status},
        </if>
        <if test="employee.deleteFlag != null">
            delete_flag=#{employee.deleteFlag},
        </if>
        <if test="employee.createBy != null">
            create_by=#{employee.createBy},
        </if>
        <if test="employee.createTime != null">
            create_time=#{employee.createTime},
        </if>
        <if test="employee.updateBy != null">
            update_by=#{employee.updateBy},
        </if>
        <if test="employee.updateTime != null">
            update_time=#{employee.updateTime}
        </if>
        WHERE
        employee_id=#{employee.employeeId}
    </update>
    <!--逻辑删除员工表-->
    <update id="logicDeleteEmployeeByEmployeeId">
        UPDATE employee
        SET delete_flag= 1,
        update_by=#{employee.updateBy},
        update_time=#{employee.updateTime}
        WHERE employee_id = #{employee.employeeId}
    </update>
    <!--逻辑批量删除员工表-->
    <update id="logicDeleteEmployeeByEmployeeIds">
        UPDATE employee
        SET delete_flag= 1,
        update_by=#{updateBy},
        update_time=#{updateTime}
        WHERE
        employee_id IN
        <foreach item="item"
                 collection="employeeIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
    <!--批量新增员工表-->
    <insert id="batchEmployee" useGeneratedKeys="true" keyProperty="employeeId">
        INSERT INTO employee
        (employee_code,employee_name,employee_gender,identity_type,identity_card,employee_birthday,employee_mobile,employee_email,employee_department_id,employee_post_id,employee_rank,employee_basic_wage,employment_date,departure_date,employment_status,status,delete_flag,create_by,create_time,update_by,update_time)
        VALUES
        <foreach item="item" index="index"
                 collection="employees"
                 separator=",">
            (#{item.employeeCode},#{item.employeeName},#{item.employeeGender},#{item.identityType},#{item.identityCard},#{item.employeeBirthday},#{item.employeeMobile},#{item.employeeEmail},#{item.employeeDepartmentId},#{item.employeePostId},#{item.employeeRank},#{item.employeeBasicWage},#{item.employmentDate},#{item.departureDate},#{item.employmentStatus},#{item.status},#{item.deleteFlag},#{item.createBy},#{item.createTime},#{item.updateBy},#{item.updateTime})
        </foreach>
    </insert>

    <!--物理删除员工表-->
    <delete id="deleteEmployeeByEmployeeId">
        DELETE
        FROM employee
        WHERE employee_id = #{employee}

    </delete>
    <!--物理批量删除员工表-->
    <delete id="deleteEmployeeByEmployeeIds">
        DELETE FROM employee
        WHERE employee_id IN
        <foreach item="item"
                 collection="employeeIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    <!--批量修改员工表-->
    <update id="updateEmployees">
        update employee
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="employee_code=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employeeCode != null and item.employeeCode != ''">
                        when employee_id=#{item.employeeId} then #{item.employeeCode}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employee_name=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employeeName != null and item.employeeName != ''">
                        when employee_id=#{item.employeeId} then #{item.employeeName}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employee_gender=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employeeGender != null">
                        when employee_id=#{item.employeeId} then #{item.employeeGender}
                    </if>
                </foreach>
            </trim>
            <trim prefix="identity_type=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.identityType != null">
                        when employee_id=#{item.employeeId} then #{item.identityType}
                    </if>
                </foreach>
            </trim>
            <trim prefix="identity_card=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.identityCard != null and item.identityCard != ''">
                        when employee_id=#{item.employeeId} then #{item.identityCard}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employee_birthday=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employeeBirthday != null">
                        when employee_id=#{item.employeeId} then #{item.employeeBirthday}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employee_mobile=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employeeMobile != null and item.employeeMobile != ''">
                        when employee_id=#{item.employeeId} then #{item.employeeMobile}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employee_email=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employeeEmail != null and item.employeeEmail != ''">
                        when employee_id=#{item.employeeId} then #{item.employeeEmail}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employee_department_id=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employeeDepartmentId != null">
                        when employee_id=#{item.employeeId} then #{item.employeeDepartmentId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employee_post_id=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employeePostId != null">
                        when employee_id=#{item.employeeId} then #{item.employeePostId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employee_rank=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employeeRank != null">
                        when employee_id=#{item.employeeId} then #{item.employeeRank}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employee_basic_wage=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employeeBasicWage != null">
                        when employee_id=#{item.employeeId} then #{item.employeeBasicWage}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employment_date=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employmentDate != null">
                        when employee_id=#{item.employeeId} then #{item.employmentDate}
                    </if>
                </foreach>
            </trim>
            <trim prefix="departure_date=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.departureDate != null">
                        when employee_id=#{item.employeeId} then #{item.departureDate}
                    </if>
                </foreach>
            </trim>
            <trim prefix="employment_status=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.employmentStatus != null">
                        when employee_id=#{item.employeeId} then #{item.employmentStatus}
                    </if>
                </foreach>
            </trim>
            <trim prefix="status=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.status != null">
                        when employee_id=#{item.employeeId} then #{item.status}
                    </if>
                </foreach>
            </trim>
            <trim prefix="delete_flag=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.deleteFlag != null">
                        when employee_id=#{item.employeeId} then #{item.deleteFlag}
                    </if>
                </foreach>
            </trim>
            <trim prefix="create_by=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.createBy != null">
                        when employee_id=#{item.employeeId} then #{item.createBy}
                    </if>
                </foreach>
            </trim>
            <trim prefix="create_time=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.createTime != null">
                        when employee_id=#{item.employeeId} then #{item.createTime}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_by=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.updateBy != null">
                        when employee_id=#{item.employeeId} then #{item.updateBy}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_time=case" suffix="end,">
                <foreach collection="employeeList" item="item" index="index">
                    <if test="item.updateTime != null">
                        when employee_id=#{item.employeeId} then #{item.updateTime}
                    </if>
                </foreach>
            </trim>
        </trim>
        where
        <foreach collection="employeeList" separator="or" item="item" index="index">
            employee_id=#{item.employeeId}
        </foreach>
    </update>
</mapper>


