<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.qixiaowei.system.manage.mapper.basic.DepartmentMapper">
    <!--    查询部门表-->
    <select id="selectDepartmentByDepartmentId"
            resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT department_id,
               parent_department_id,
               ancestors,
               department_code,
               department_name,
               level,
               department_leader_id,
               department_leader_post_id,
               examination_leader_id,
               department_importance_factor,
               department_description,
               sort,
               status,
               delete_flag,
               create_by,
               create_time,
               update_by,
               update_time
        FROM department
        WHERE department_id = #{departmentId}
          and delete_flag = 0
    </select>

    <!--    查询部门表列表-->
    <select id="selectDepartmentList" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        select
        ee.employee_name as department_leader_name,
        ee2.employee_name as examination_leader_name,
        p.post_name as department_leader_post_name,
        dm.department_id,
        dm.parent_department_id,
        dm.ancestors,
        dm.department_code,
        dm.department_name,
        dm2.department_name as parentDepartmentName,
        dm.level,
        dm.department_leader_id,
        ee.employee_post_id as department_leader_post_id,
        dm.examination_leader_id,
        dm.department_importance_factor,
        dm.department_description,
        dm.sort,
        dm.status,
        dm.create_by,
        dm.create_time,
        dm.update_by,
        dm.update_time
        from
        department dm
        left join employee ee
        on ee.employee_id = dm.department_leader_id
        and ee.delete_flag =0
        left join post p2
        on p2.post_id = ee.employee_post_id
        and p2.delete_flag =0
        left join employee ee2
        on ee2.employee_id = dm.examination_leader_id
        and ee2.delete_flag =0
        left join post p
        on p.post_id = dm.department_leader_post_id
        and p.delete_flag =0
        left join department dm2
        on dm.parent_department_id = dm2.department_id
        and dm2.delete_flag =0
        where dm.delete_flag =0
        <!-- 组织编码过滤  -->
        <if test="department.params.departmentCodeEqual != null and department.params.departmentCodeEqual.size() > 0">
            AND dm.department_code IN
            <foreach item="item"
                     collection="department.params.departmentCodeEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.departmentCodeNotEqual != null and department.params.departmentCodeNotEqual.size() > 0">
            AND (dm.department_code NOT IN
            <foreach item="item"
                     collection="department.params.departmentCodeNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR dm.department_code IS NULL
            )
        </if>
        <if test="department.params.departmentCodeLike != null and department.params.departmentCodeLike.size() > 0">
            AND
            (          <foreach item="item"
                                collection="department.params.departmentCodeLike"
                                index="index" open="(" separator="OR" close=")">
            dm.department_code LIKE concat('%', #{item}, '%')
        </foreach>)
        </if>
        <if test="department.params.departmentCodeNotLike != null and department.params.departmentCodeNotLike.size() > 0">
            AND
            <foreach item="item"
                     collection="department.params.departmentCodeNotLike"
                     index="index" open="(" separator="AND" close=")">
                dm.department_code NOT LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <!-- 组织名称过滤  -->
        <if test="department.params.departmentNameEqual != null and department.params.departmentNameEqual.size() > 0">
            AND dm.department_name IN
            <foreach item="item"
                     collection="department.params.departmentNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.departmentNameNotEqual != null and department.params.departmentNameNotEqual.size() > 0">
            AND (dm.department_name NOT IN
            <foreach item="item"
                     collection="department.params.departmentNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR dm.department_name IS NULL
            )
        </if>
        <if test="department.params.departmentNameLike != null and department.params.departmentNameLike.size() > 0">
            AND
            (        <foreach item="item"
                              collection="department.params.departmentNameLike"
                              index="index" open="(" separator="OR" close=")">
            dm.department_name LIKE concat('%', #{item}, '%')
        </foreach>)
        </if>
        <if test="department.params.departmentNameNotLike != null and department.params.departmentNameNotLike.size() > 0">
            AND
            <foreach item="item"
                     collection="department.params.departmentNameNotLike"
                     index="index" open="(" separator="AND" close=")">
                dm.department_name NOT LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <!-- 上级组织名称过滤  -->
        <if test="department.params.parentDepartmentNameEqual != null and department.params.parentDepartmentNameEqual.size() > 0">
            AND dm2.department_name IN
            <foreach item="item"
                     collection="department.params.parentDepartmentNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.parentDepartmentNameNotEqual != null and department.params.parentDepartmentNameNotEqual.size() > 0">
            AND (dm2.department_name NOT IN
            <foreach item="item"
                     collection="department.params.parentDepartmentNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR dm2.department_name IS NULL
            )
        </if>
        <if test="department.params.parentDepartmentNameNull != null">
            AND dm.parent_department_id = 0
        </if>
        <if test="department.params.parentDepartmentNameNotNull != null">
            AND dm.parent_department_id != 0
        </if>
        <!-- 组织层级过滤  -->
        <if test="department.params.levelEqual != null and department.params.levelEqual.size() > 0">
            AND dm.level IN
            <foreach item="item"
                     collection="department.params.levelEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.levelNotEqual != null and department.params.levelNotEqual.size() > 0">
            AND dm.level NOT IN
            <foreach item="item"
                     collection="department.params.levelNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.levelGreaterThan != null ">
            AND dm.level &gt;#{department.params.levelGreaterThan}
        </if>
        <if test="department.params.levelNotGreaterThan != null ">
            AND dm.level &lt;=#{department.params.levelNotGreaterThan}
        </if>
        <if test="department.params.levelLessThan != null ">
            AND dm.level &lt;#{department.params.levelLessThan}
        </if>
        <if test="department.params.levelNotLessThan != null ">
            AND dm.level &gt;=#{department.params.levelNotLessThan}
        </if>
        <!-- 组织负责人过滤  -->
        <if test="department.params.departmentLeaderNameEqual != null and department.params.departmentLeaderNameEqual.size() > 0">
            AND ee.employee_name IN
            <foreach item="item"
                     collection="department.params.departmentLeaderNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.departmentLeaderNameNotEqual != null and department.params.departmentLeaderNameNotEqual.size() > 0">
            AND (ee.employee_name NOT IN
            <foreach item="item"
                     collection="department.params.departmentLeaderNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR ee.employee_name IS NULL
            )
        </if>
        <if test="department.params.departmentLeaderNameNull != null">
            AND (ee.employee_name IS NULL or ee.employee_name ='')
        </if>
        <if test="department.params.departmentLeaderNameNotNull != null">
            AND (ee.employee_name IS NOT NULL or ee.employee_name != '')
        </if>
        <!-- 组织负责人岗位过滤  -->
        <if test="department.params.departmentLeaderPostIdEqual != null and department.params.departmentLeaderPostIdEqual.size() > 0">
            AND p2.post_id IN
            <foreach item="item"
                     collection="department.params.departmentLeaderPostIdEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.departmentLeaderPostIdNotEqual != null and department.params.departmentLeaderPostIdNotEqual.size() > 0">
            AND (p2.post_id NOT IN
            <foreach item="item"
                     collection="department.params.departmentLeaderPostIdNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR p2.post_id IS NULL
            )
        </if>
        <if test="department.params.departmentLeaderPostIdNull != null">
            AND p2.post_id IS NULL
        </if>
        <if test="department.params.departmentLeaderPostIdNotNull != null">
            AND p2.post_id IS NOT NULL
        </if>
        <!-- 考核负责人过滤  -->
        <if test="department.params.examinationLeaderNameEqual != null and department.params.examinationLeaderNameEqual.size() > 0">
            AND ee2.employee_name IN
            <foreach item="item"
                     collection="department.params.examinationLeaderNameEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.examinationLeaderNameNotEqual != null and department.params.examinationLeaderNameNotEqual.size() > 0">
            AND (ee2.employee_name NOT IN
            <foreach item="item"
                     collection="department.params.examinationLeaderNameNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR ee2.employee_name IS NULL
            )
        </if>
        <if test="department.params.examinationLeaderNameNull != null">
            AND (ee2.employee_name IS NULL or ee2.employee_name ='')
        </if>
        <if test="department.params.examinationLeaderNameNotNull != null">
            AND (ee2.employee_name IS NOT NULL or ee2.employee_name != '')
        </if>
        <!-- 组织重要性系数过滤  -->
        <if test="department.params.departmentImportanceFactorEqual != null and department.params.departmentImportanceFactorEqual.size() > 0">
            AND dm.department_importance_factor IN
            <foreach item="item"
                     collection="department.params.departmentImportanceFactorEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.departmentImportanceFactorNotEqual != null and department.params.departmentImportanceFactorNotEqual.size() > 0">
            AND (dm.department_importance_factor NOT IN
            <foreach item="item"
                     collection="department.params.departmentImportanceFactorNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            or  dm.department_importance_factor is null)
        </if>
        <if test="department.params.departmentImportanceFactorGreaterThan != null ">
            AND dm.department_importance_factor &gt;#{department.params.departmentImportanceFactorGreaterThan}
        </if>
        <if test="department.params.departmentImportanceFactorNotGreaterThan != null ">
            AND dm.department_importance_factor &lt;=#{department.params.departmentImportanceFactorNotGreaterThan}
        </if>
        <if test="department.params.departmentImportanceFactorLessThan != null ">
            AND dm.department_importance_factor &lt;#{department.params.departmentImportanceFactorLessThan}
        </if>
        <if test="department.params.departmentImportanceFactorNotLessThan != null ">
            AND dm.department_importance_factor &gt;=#{department.params.departmentImportanceFactorNotLessThan}
        </if>
        <if test="department.params.departmentImportanceFactorNull != null">
            AND dm.department_importance_factor IS NULL
        </if>
        <if test="department.params.departmentImportanceFactorNotNull != null">
            AND dm.department_importance_factor IS NOT NULL
        </if>
        <!-- 组织状态过滤  -->
        <if test="department.params.statusEqual != null and department.params.statusEqual.size() > 0">
            AND dm.status IN
            <foreach item="item"
                     collection="department.params.statusEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.statusNotEqual != null and department.params.statusNotEqual.size() > 0">
            AND (dm.status NOT IN
            <foreach item="item"
                     collection="department.params.statusNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR dm.status IS NULL
            )
        </if>
        <!-- 奖金发放申请预算部门名称过滤  -->
        <if test="department.params.budgetDepartmentNamesEqual != null and department.params.budgetDepartmentNamesEqual.size() > 0">
            AND dm.department_name IN
            <foreach item="item"
                     collection="department.params.budgetDepartmentNamesEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="department.params.budgetDepartmentNamesNotEqual != null and department.params.budgetDepartmentNamesNotEqual.size() > 0">
            AND (dm.department_name NOT IN
            <foreach item="item"
                     collection="department.params.budgetDepartmentNamesNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
            OR dm.department_name IS NULL
            )
        </if>
        <if test="department.params.budgetDepartmentNamesLike != null and department.params.budgetDepartmentNamesLike.size() > 0">
            AND
            (            <foreach item="item"
                                  collection="department.params.budgetDepartmentNamesLike"
                                  index="index" open="(" separator="OR" close=")">
            dm.department_name LIKE concat('%', #{item}, '%')
        </foreach>)
        </if>
        <if test="department.params.budgetDepartmentNamesNotLike != null and department.params.budgetDepartmentNamesNotLike.size() > 0">
            AND
            <foreach item="item"
                     collection="department.params.budgetDepartmentNamesNotLike"
                     index="index" open="(" separator="AND" close=")">
                dm.department_name NOT LIKE concat('%', #{item}, '%')
            </foreach>
        </if>
        <if test="department.examinationLeaderName != null and department.examinationLeaderName != ''">
            and ee2.employee_name like '%${department.examinationLeaderName}%'
        </if>
        <if test="department.departmentLeaderName != null and department.departmentLeaderName != ''">
            and ee.employee_name like '%${department.departmentLeaderName}%'
        </if>
        <if test="department.departmentCode != null and department.departmentCode != ''">
            and dm.department_code like '%${department.departmentCode}%'
        </if>
        <if test="department.departmentName != null and department.departmentName != ''">
            and dm.department_name like '%${department.departmentName}%'
        </if>
        <if test="department.parentDepartmentName != null and department.parentDepartmentName != ''">
            and dm2.department_name like '%${department.parentDepartmentName}%'
        </if>
        <if test="department.level != null">
            and dm.level like '%${department.level}%'
        </if>
        <if test="department.departmentLeaderId != null">
            and dm.department_leader_id like '%${department.departmentLeaderId}%'
        </if>
        <if test="department.departmentLeaderPostId != null">
            and dm.department_leader_post_id like '%${department.departmentLeaderPostId}%'
        </if>
        <if test="department.examinationLeaderId != null">
            and dm.examination_leader_id like '%${department.examinationLeaderId}%'
        </if>
        <if test="department.departmentImportanceFactor != null">
            and dm.department_importance_factor like '%${department.departmentImportanceFactor}%'
        </if>
        <if test="department.departmentDescription != null and department.departmentDescription != ''">
            and dm.department_description like '%${department.departmentDescription}%'
        </if>
        <if test="department.sort != null">
            and dm.sort like '%${department.sort}%'
        </if>
        <if test="department.status != null and (department.status ==0 or department.status == 1)">
            and dm.status = #{department.status}
        </if>
        <!-- 数据范围过滤 -->
        ${department.params.dataScope}
        ORDER BY dm.status DESC,dm.create_time DESC
    </select>

    <select id="getDepartmentCodes" resultType="java.lang.String">
        SELECT department_code
        FROM department
        WHERE delete_flag = 0
          AND department_code LIKE CONCAT(#{prefixCodeRule}, '%')
        ORDER BY department_code ASC
    </select>

    <!--    根据父级id查询数据-->
    <select id="selectParentDepartmentId" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        select ee.employee_name  as department_leader_name,
               ee2.employee_name as examination_leader_name,
               p.post_name       as department_leader_post_name,
               dm.department_id,
               dm.parent_department_id,
               dm.ancestors,
               dm.status,
               dm.department_code,
               dm.department_name,
               dm.level,
               dm.department_leader_id,
               ee.employee_post_id as department_leader_post_id,
               dm.examination_leader_id,
               dm.department_importance_factor,
               dm.department_description,
               dm.sort,
               dm.status
        from department dm
                 left join employee ee
                           on ee.employee_id = dm.department_leader_id
                               and ee.delete_flag = 0
                 left join employee ee2
                           on ee2.employee_id = dm.examination_leader_id
                               and ee2.delete_flag = 0
                 left join post p
                           on p.post_id = ee.employee_post_id
                               and p.delete_flag = 0
        where dm.delete_flag = 0
          and dm.department_id = #{departmentId}
    </select>
    <!--    根据id查询所有子级数据-->
    <select id="selectAncestors" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT
        department_id,
        parent_department_id,
        ancestors,
        department_code,
        department_name,
        level,
        department_leader_id,
        department_leader_post_id,
        examination_leader_id,
        department_importance_factor,
        department_description,
        sort,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM (
        SELECT
        department_id,
        parent_department_id,
        ancestors,
        department_code,
        department_name,
        level,
        department_leader_id,
        department_leader_post_id,
        examination_leader_id,
        department_importance_factor,
        department_description,
        sort,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM
        department
        WHERE
        delete_flag=0
        <if test="departmentId != null">
            and department_id=#{departmentId}
        </if>
        union
        SELECT department_id,
        parent_department_id,
        ancestors,
        department_code,
        department_name,
        level,
        department_leader_id,
        department_leader_post_id,
        examination_leader_id,
        department_importance_factor,
        department_description,
        sort,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM department
        <if test="departmentId != null">
            WHERE find_in_set(#{departmentId}, ancestors)
        </if>
        and delete_flag = 0
        ) AS ancestors
    </select>
    <select id="getParentId" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT
        department_id, parent_department_id, ancestors, department_code, department_name, level, department_leader_id,
        department_leader_post_id, examination_leader_id, department_importance_factor, department_description, sort,
        status, delete_flag, create_by, create_time, update_by, update_time
        FROM department
        WHERE delete_flag=0
        <if test="department.departmentId != null">
            and department_id=#{department.departmentId}
        </if>
        <if test="department.parentDepartmentId != null">
            and parent_department_id=#{department.parentDepartmentId}
        </if>
        <if test="department.ancestors != null and department.ancestors != ''">
            and ancestors=#{department.ancestors}
        </if>
        <if test="department.departmentCode != null and department.departmentCode != ''">
            and department_code=#{department.departmentCode}
        </if>
        <if test="department.departmentCodeList != null and department.departmentCodeList != ''">
            and (<foreach item="item" index="index"
                          collection="department.departmentCodeList"
                          separator="or">
            department_code=#{item}
        </foreach>)
        </if>
        <if test="department.departmentName != null and department.departmentName != ''">
            and department_name=#{department.departmentName}
        </if>
        <if test="department.level != null">
            and level=#{department.level}
        </if>
        <if test="department.departmentLeaderId != null">
            and department_leader_id=#{department.departmentLeaderId}
        </if>
        <if test="department.departmentLeaderPostId != null">
            and department_leader_post_id=#{department.departmentLeaderPostId}
        </if>
        <if test="department.examinationLeaderId != null">
            and examination_leader_id=#{department.examinationLeaderId}
        </if>
        <if test="department.departmentImportanceFactor != null">
            and department_importance_factor=#{department.departmentImportanceFactor}
        </if>
        <if test="department.departmentDescription != null and department.departmentDescription != ''">
            and department_description=#{department.departmentDescription}
        </if>
        <if test="department.sort != null">
            and sort=#{department.sort}
        </if>
        <if test="department.status != null">
            and status=#{department.status}
        </if>
        <if test="department.deleteFlag != null">
            and delete_flag=#{department.deleteFlag}
        </if>
        <if test="department.createBy != null">
            and create_by=#{department.createBy}
        </if>
        <if test="department.createTime != null">
            and create_time=#{department.createTime}
        </if>
        <if test="department.updateBy != null">
            and update_by=#{department.updateBy}
        </if>
        <if test="department.updateTime != null">
            and update_time=#{department.updateTime}
        </if>
    </select>
    <!--    查询上级组织-->
    <select id="queryparent" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        select
        ee.employee_name as department_leader_name,
        ee2.employee_name as examination_leader_name,
        p.post_name as department_leader_post_name,
        dm.department_id,
        dm.parent_department_id,
        dm.ancestors,
        dm.department_code,
        dm.department_name,
        dm2.department_name as parentDepartmentName,
        dm.level,
        dm.department_leader_id,
        dm.department_leader_post_id,
        dm.examination_leader_id,
        dm.department_importance_factor,
        dm.department_description,
        dm.sort,
        dm.status,
        dm.create_by,
        dm.create_time,
        dm.update_by,
        dm.update_time
        from
        department dm
        left join employee ee
        on ee.employee_id = dm.department_leader_id
        and ee.delete_flag =0
        left join post p2
        on p2.post_id = ee.employee_post_id
        and p2.delete_flag =0
        left join employee ee2
        on ee2.employee_id = dm.examination_leader_id
        and ee2.delete_flag =0
        left join post p
        on p.post_id = dm.department_leader_post_id
        and p.delete_flag =0
        left join department dm2
        on dm.parent_department_id = dm2.department_id
        and dm2.delete_flag =0
        where dm.delete_flag =0
        <if test="status != null and (status ==0 or status ==1)">
            and dm.status = #{status}
        </if>

    </select>
    <!--    查询code编码是否已经存在-->
    <select id="selectDepartmentCode" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT department_id, parent_department_id, ancestors, department_code, department_name, `level`,
        department_leader_id, department_leader_post_id, examination_leader_id, department_importance_factor,
        department_description, sort, status, delete_flag, create_by, create_time, update_by, update_time
        FROM department
        where
        <if test="departmentCode != null and departmentCode != ''">
            BINARY department_code=#{departmentCode}
        </if>
        and delete_flag = 0
    </select>
    <!--    查询组织关联岗位信息-->
    <select id="selectDeptAndPost" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentPostDTO">
        select ord.official_rank_decompose_id,
               p.post_name,
               p.post_code,
               ors.official_rank_system_name,
               case
                   when ors.rank_prefix_code is null then p.post_rank
                   when ors.rank_prefix_code is not null
                       then concat(ors.rank_prefix_code, p.post_rank) end as post_rank_name,
               dm.department_name,
               dm.department_code,
               ors2.official_rank_system_name                             as official_rank_decompose_name,
               deptpost.department_post_id,
               deptpost.department_id,
               deptpost.post_id,
               deptpost.department_sort,
               deptpost.post_sort,
               deptpost.delete_flag,
               deptpost.create_by,
               deptpost.create_time,
               deptpost.update_by,
               deptpost.update_time
        from department_post deptpost
                 left join department dm
                           on deptpost.department_id = dm.department_id
                               and dm.delete_flag = 0
                 left join post p on
                    p.post_id = deptpost.post_id
                and p.delete_flag = 0
                 left join official_rank_system ors on
                    p.official_rank_system_id = ors.official_rank_system_id
                and ors.delete_flag = 0
                 left join official_rank_decompose ord
                           on ord.delete_flag = 0
                               and ord.rank_decompose_dimension = 1
                               and ord.decompose_dimension = deptpost.department_id
                 left join official_rank_system ors2 on
                    ord.official_rank_system_id = ors2.official_rank_system_id
                and ors2.delete_flag = 0
        where deptpost.delete_flag = 0
          and deptpost.department_id in
        <foreach item="item"
                 collection="departmentIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        order by deptpost.post_sort
    </select>
    <!--    分页查询部门人员表列表-->
    <select id="queryDeptEmployee" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
        dept.department_name,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        p.post_name as employee_post_name,
        e.employee_rank,
        case when ors.rank_prefix_code is null then e.employee_rank
        when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code,e.employee_rank) end as
        employee_rank_name,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        e.create_by,
        e.create_time,
        e.update_by,
        e.update_time
        from
        department dept
        inner join
        employee e
        on
        dept.department_id = e.employee_department_id
        and e.delete_flag = 0
        left join post p
        on p.post_id = e.employee_post_id
        and p.delete_flag = 0
        left join official_rank_system ors
        on ors.official_rank_system_id = p.official_rank_system_id
        and ors.delete_flag =0
        where
        dept.delete_flag = 0
        <if test="departmentId != null">
            and dept.department_id=#{departmentId}
        </if>
        and e.employment_status =1
        and e.status =1
    </select>
    <!--    查询人员是否被部门引用-->
    <select id="deleteFlagEmployee" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select distinct u.user_name,
                        p.post_name         as employee_post_name,
                        dm.department_name  as department_leader_name,
                        dm2.department_name as examination_leader_name,
                        ee.employee_id,
                        ee.employee_code,
                        ee.employee_name,
                        ee.employee_gender,
                        ee.identity_type,
                        ee.identity_card,
                        ee.employee_birthday,
                        ee.employee_mobile,
                        ee.employee_email,
                        ee.employee_department_id,
                        ee.employee_post_id,
                        ee.employee_rank,
                        ee.employee_basic_wage,
                        ee.employment_date,
                        ee.departure_date,
                        ee.employment_status,
                        ee.status
        from employee ee
                 left join department dm
                           on ee.employee_id = dm.department_leader_id
                               and dm.delete_flag = 0
                 left join department dm2
                           on ee.employee_id = dm2.examination_leader_id
                               and dm2.delete_flag = 0
                 left join post p
                           on p.post_id = ee.employee_post_id
                               and p.delete_flag = 0
                 left join `user` u
                           on u.employee_id = ee.employee_id
                               and u.delete_flag = 0
        where ee.employee_id in
        <foreach item="item"
                 collection="employeeIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
          and ee.delete_flag = 0
    </select>


    <!--    查询人员是否被部门引用-->
    <select id="deleteFlagEmployees" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT department_id,
        parent_department_id,
        ancestors,
        department_code,
        department_name,
        level,
        department_leader_id,
        department_leader_post_id,
        examination_leader_id,
        department_importance_factor,
        department_description,
        sort,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM department
        WHERE 1=1
        and delete_flag = 0
        and (department_leader_id in
        <foreach item="item"
                 collection="collect"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        or
        examination_leader_id in
        <foreach item="item"
                 collection="collect"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>)
    </select>
    <!--    批量查询code编码是否已经存在-->
    <select id="selectDepartmentCodes" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT department_id, parent_department_id, ancestors, department_code, department_name, `level`,
        department_leader_id, department_leader_post_id, examination_leader_id, department_importance_factor,
        department_description, sort, status, delete_flag, create_by, create_time, update_by, update_time
        FROM department
        where department_code in
        <foreach item="item"
                 collection="departmentCodes"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and delete_flag = 0
    </select>
    <!--    批量查询部门表-->
    <select id="selectDepartmentByDepartmentIds"
            resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT d.department_id, d.parent_department_id, d.ancestors, d.department_code, d.department_name, d.`level`,
        d.department_leader_id, d.department_leader_post_id, d.examination_leader_id, d.department_importance_factor,
        d.department_description, d.sort, d.status, d.delete_flag, d.create_by, d.create_time, d.update_by,
        d.update_time,
        e.employee_name as department_leader_name,
        ee.employee_name as examination_leader_name
        FROM department d
        LEFT JOIN employee e
        ON d.department_leader_id = e.employee_id
        AND e.delete_flag =0
        LEFT JOIN employee ee
        ON d.examination_leader_id = ee.employee_id
        AND d.delete_flag =0
        where department_id in
        <foreach item="item"
                 collection="departmentIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and d.delete_flag = 0
    </select>
    <!--    返回部门层级-->
    <select id="selectLevel" resultType="java.lang.Integer">
        SELECT level
        FROM department
        WHERE delete_flag = 0
        group by level
    </select>
    <!--    查询所有一级部门-->
    <select id="getStatuParentAll" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT department_id,
               parent_department_id,
               ancestors,
               department_code,
               department_name,
               `level`,
               department_leader_id,
               department_leader_post_id,
               examination_leader_id,
               department_importance_factor,
               department_description,
               sort,
               status,
               delete_flag,
               create_by,
               create_time,
               update_by,
               update_time
        FROM department
        where delete_flag = 0
          and status = 1
          and level = 1
    </select>
    <!--    远程查询一级部门及子级部门-->
    <select id="selectParentDepartment" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT
        department_id,
        parent_department_id,
        ancestors,
        department_code,
        department_name,
        level,
        department_leader_id,
        department_leader_post_id,
        examination_leader_id,
        department_importance_factor,
        department_description,
        sort,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM (
        SELECT
        department_id,
        parent_department_id,
        ancestors,
        department_code,
        department_name,
        level,
        department_leader_id,
        department_leader_post_id,
        examination_leader_id,
        department_importance_factor,
        department_description,
        sort,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM
        department
        WHERE
        delete_flag=0
        <if test="status != null">
            and  status=#{status}
        </if>
        <if test="departmentId != null">
            and department_id=#{departmentId}
        </if>
        union
        SELECT department_id,
        parent_department_id,
        ancestors,
        department_code,
        department_name,
        level,
        department_leader_id,
        department_leader_post_id,
        examination_leader_id,
        department_importance_factor,
        department_description,
        sort,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM department
        <if test="departmentId != null">
            WHERE find_in_set(#{departmentId}, ancestors)
        </if>
        and delete_flag = 0
        <if test="status != null">
            and  status=#{status}
        </if>
        ) AS ancestors
    </select>
    <!--    远程查询所有部门-->
    <select id="getAll" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT
        department_id,
        parent_department_id,
        ancestors,
        department_code,
        department_name,
        `level`,
        department_leader_id,
        department_leader_post_id,
        examination_leader_id,
        department_importance_factor,
        department_description,
        sort,
        status,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM department
        where delete_flag = 0
        and status = 1
    </select>
<!--    查询部门是否被人员引用！-->
    <select id="queryDeptEmployees" resultType="net.qixiaowei.system.manage.api.dto.basic.EmployeeDTO">
        select
        dept.department_name,
        e.employee_id,
        e.employee_code,
        e.employee_name,
        e.employee_gender,
        e.identity_type,
        e.identity_card,
        e.employee_birthday,
        e.employee_mobile,
        e.employee_email,
        e.employee_department_id,
        e.employee_post_id,
        p.post_name as employee_post_name,
        e.employee_rank,
        case when ors.rank_prefix_code is null then e.employee_rank
        when ors.rank_prefix_code is not null then concat(ors.rank_prefix_code,e.employee_rank) end as
        employee_rank_name,
        e.employee_basic_wage,
        e.employment_date,
        e.departure_date,
        e.employment_status,
        e.status,
        e.delete_flag,
        e.create_by,
        e.create_time,
        e.update_by,
        e.update_time
        from
        department dept
        inner join
        employee e
        on
        dept.department_id = e.employee_department_id
        and e.delete_flag = 0
        left join post p
        on p.post_id = e.employee_post_id
        and p.delete_flag = 0
        left join official_rank_system ors
        on ors.official_rank_system_id = p.official_rank_system_id
        and ors.delete_flag =0
        where
        dept.delete_flag = 0
       and dept.department_id in
        <foreach item="item"
                 collection="departmentIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and e.employment_status =1
        and e.status =1
    </select>
<!--    查询历史一级部门-->
    <select id="queryHistoryTopDepartment"
            resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        select
            department_id,
            parent_department_id,
            ancestors,
            department_code,
            department_name,
            `level`,
            department_leader_id,
            department_leader_post_id,
            examination_leader_id,
            department_importance_factor,
            department_description,
            sort,
            status,
            delete_flag,
            create_by,
            create_time,
            update_by,
            update_time,
            tenant_id
        from
            department
        where delete_flag =0
        and  `level` =1
          and parent_department_id =0
    </select>
<!--    查询公司级部门-->
    <select id="queryCompanyTopDepartment"
            resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        select
            department_id,
            parent_department_id,
            ancestors,
            department_code,
            department_name,
            `level`,
            department_leader_id,
            department_leader_post_id,
            examination_leader_id,
            department_importance_factor,
            department_description,
            sort,
            status,
            delete_flag,
            create_by,
            create_time,
            update_by,
            update_time,
            tenant_id
        from
            department
        where delete_flag =0
          and `level` =0
          and parent_department_id =0
    </select>
<!--    查询所有一级部门-->
    <select id="getAllParentAll" resultType="net.qixiaowei.system.manage.api.dto.basic.DepartmentDTO">
        SELECT department_id,
               parent_department_id,
               ancestors,
               department_code,
               department_name,
               `level`,
               department_leader_id,
               department_leader_post_id,
               examination_leader_id,
               department_importance_factor,
               department_description,
               sort,
               status,
               delete_flag,
               create_by,
               create_time,
               update_by,
               update_time
        FROM department
        where delete_flag = 0
          and level = 1
    </select>

    <!--新增部门表-->
    <insert id="insertDepartment" useGeneratedKeys="true" keyProperty="departmentId">
        INSERT INTO department (parent_department_id, ancestors, department_code, department_name, level,
                                department_leader_id, department_leader_post_id, examination_leader_id,
                                department_importance_factor, department_description, sort, status, delete_flag,
                                create_by, create_time, update_by, update_time)
        VALUES (#{department.parentDepartmentId}, #{department.ancestors}, #{department.departmentCode},
                #{department.departmentName}, #{department.level}, #{department.departmentLeaderId},
                #{department.departmentLeaderPostId}, #{department.examinationLeaderId},
                #{department.departmentImportanceFactor}, #{department.departmentDescription}, #{department.sort},
                #{department.status}, #{department.deleteFlag}, #{department.createBy}, #{department.createTime},
                #{department.updateBy}, #{department.updateTime})
    </insert>
    <!--修改部门表-->
    <update id="updateDepartment">
        UPDATE department
        SET
        <if test="department.parentDepartmentId != null">
            parent_department_id=#{department.parentDepartmentId},
        </if>
        ancestors=#{department.ancestors},
        <if test="department.departmentCode != null and department.departmentCode != ''">
            department_code=#{department.departmentCode},
        </if>
        <if test="department.departmentName != null and department.departmentName != ''">
            department_name=#{department.departmentName},
        </if>
        <if test="department.level != null">
            level=#{department.level},
        </if>
        <if test="department.departmentLeaderId != null">
            department_leader_id=#{department.departmentLeaderId},
        </if>
        <if test="department.departmentLeaderPostId != null">
            department_leader_post_id=#{department.departmentLeaderPostId},
        </if>
        <if test="department.examinationLeaderId != null">
            examination_leader_id=#{department.examinationLeaderId},
        </if>
        <if test="department.departmentImportanceFactor != null">
            department_importance_factor=#{department.departmentImportanceFactor},
        </if>
        <if test="department.departmentDescription != null and department.departmentDescription != ''">
            department_description=#{department.departmentDescription},
        </if>
        <if test="department.sort != null">
            sort=#{department.sort},
        </if>
        <if test="department.status != null">
            status=#{department.status},
        </if>
        <if test="department.deleteFlag != null">
            delete_flag=#{department.deleteFlag},
        </if>
        <if test="department.createBy != null">
            create_by=#{department.createBy},
        </if>
        <if test="department.createTime != null">
            create_time=#{department.createTime},
        </if>
        <if test="department.updateBy != null">
            update_by=#{department.updateBy},
        </if>
        <if test="department.updateTime != null">
            update_time=#{department.updateTime}
        </if>
        WHERE
        department_id=#{department.departmentId}
    </update>
    <!--逻辑删除部门表-->
    <update id="logicDeleteDepartmentByDepartmentId">
        UPDATE department
        SET delete_flag= 1,
            update_by=#{department.updateBy},
            update_time=#{department.updateTime}
        WHERE department_id = #{department.departmentId}
    </update>
    <!--逻辑批量删除部门表-->
    <update id="logicDeleteDepartmentByDepartmentIds">
        UPDATE department
        SET delete_flag= 1,
        update_by=#{updateBy},
        update_time=#{updateTime}
        WHERE
        department_id IN
        <foreach item="item"
                 collection="departmentIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
    <!--批量新增部门表-->
    <insert id="batchDepartment">
        INSERT INTO department
        (parent_department_id,ancestors,department_code,department_name,level,department_leader_id,department_leader_post_id,examination_leader_id,department_importance_factor,department_description,sort,status,delete_flag,create_by,create_time,update_by,update_time)
        VALUES
        <foreach item="item" index="index"
                 collection="departments"
                 separator=",">
            (#{item.parentDepartmentId},#{item.ancestors},#{item.departmentCode},#{item.departmentName},#{item.level},#{item.departmentLeaderId},#{item.departmentLeaderPostId},#{item.examinationLeaderId},#{item.departmentImportanceFactor},#{item.departmentDescription},#{item.sort},#{item.status},#{item.deleteFlag},#{item.createBy},#{item.createTime},#{item.updateBy},#{item.updateTime})
        </foreach>
    </insert>

    <!--物理删除部门表-->
    <delete id="deleteDepartmentByDepartmentId">
        DELETE
        FROM department
        WHERE department_id = #{department}

    </delete>
    <!--物理批量删除部门表-->
    <delete id="deleteDepartmentByDepartmentIds">
        DELETE FROM department
        WHERE department_id IN
        <foreach item="item"
                 collection="departmentIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    <!--批量修改部门表-->
    <update id="updateDepartments">
        update department
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="parent_department_id=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.parentDepartmentId != null">
                        when department_id=#{item.departmentId} then #{item.parentDepartmentId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="ancestors=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.ancestors != null and item.ancestors != ''">
                        when department_id=#{item.departmentId} then #{item.ancestors}
                    </if>
                </foreach>
            </trim>
            <trim prefix="department_code=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.departmentCode != null and item.departmentCode != ''">
                        when department_id=#{item.departmentId} then #{item.departmentCode}
                    </if>
                </foreach>
            </trim>
            <trim prefix="department_name=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.departmentName != null and item.departmentName != ''">
                        when department_id=#{item.departmentId} then #{item.departmentName}
                    </if>
                </foreach>
            </trim>
            <trim prefix="level=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.level != null">
                        when department_id=#{item.departmentId} then #{item.level}
                    </if>
                </foreach>
            </trim>
            <trim prefix="department_leader_id=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.departmentLeaderId != null">
                        when department_id=#{item.departmentId} then #{item.departmentLeaderId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="department_leader_post_id=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.departmentLeaderPostId != null">
                        when department_id=#{item.departmentId} then #{item.departmentLeaderPostId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="examination_leader_id=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.examinationLeaderId != null">
                        when department_id=#{item.departmentId} then #{item.examinationLeaderId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="department_importance_factor=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.departmentImportanceFactor != null">
                        when department_id=#{item.departmentId} then #{item.departmentImportanceFactor}
                    </if>
                </foreach>
            </trim>
            <trim prefix="department_description=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.departmentDescription != null and item.departmentDescription != ''">
                        when department_id=#{item.departmentId} then #{item.departmentDescription}
                    </if>
                </foreach>
            </trim>
            <trim prefix="sort=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.sort != null">
                        when department_id=#{item.departmentId} then #{item.sort}
                    </if>
                </foreach>
            </trim>
            <trim prefix="status=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.status != null">
                        when department_id=#{item.departmentId} then #{item.status}
                    </if>
                </foreach>
            </trim>
            <trim prefix="delete_flag=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.deleteFlag != null">
                        when department_id=#{item.departmentId} then #{item.deleteFlag}
                    </if>
                </foreach>
            </trim>
            <trim prefix="create_by=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.createBy != null">
                        when department_id=#{item.departmentId} then #{item.createBy}
                    </if>
                </foreach>
            </trim>
            <trim prefix="create_time=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.createTime != null">
                        when department_id=#{item.departmentId} then #{item.createTime}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_by=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.updateBy != null">
                        when department_id=#{item.departmentId} then #{item.updateBy}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_time=case" suffix="end,">
                <foreach collection="departmentList" item="item" index="index">
                    <if test="item.updateTime != null">
                        when department_id=#{item.departmentId} then #{item.updateTime}
                    </if>
                </foreach>
            </trim>
        </trim>
        where
        <foreach collection="departmentList" separator="or" item="item" index="index">
            department_id=#{item.departmentId}
        </foreach>
    </update>
</mapper>


