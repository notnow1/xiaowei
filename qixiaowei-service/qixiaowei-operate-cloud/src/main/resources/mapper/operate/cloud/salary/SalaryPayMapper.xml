<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.qixiaowei.operate.cloud.mapper.salary.SalaryPayMapper">

    <resultMap type="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO" id="SalaryPayAndDetails">
        <id property="salaryPayId" column="salary_pay_id"/>
        <result property="employeeId" column="employee_id"/>
        <result property="payYear" column="pay_year"/>
        <result property="payMonth" column="pay_month"/>
        <result property="salaryAmount" column="salary_amount"/>
        <result property="allowanceAmount" column="allowance_amount"/>
        <result property="welfareAmount" column="welfare_amount"/>
        <result property="bonusAmount" column="bonus_amount"/>
        <result property="withholdRemitTax" column="withhold_remit_tax"/>
        <result property="otherDeductions" column="other_deductions"/>
        <result property="payAmount" column="pay_amount"/>
        <result property="deleteFlag" column="delete_flag"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
        <collection property="salaryPayDetailsDTOList"
                    ofType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDetailsDTO"
                    javaType="list">
            <id property="salaryPayDetailsId" column="salary_pay_details_id"/>
            <result property="salaryPayId" column="salary_pay_id"/>
            <result property="salaryItemId" column="salary_item_id"/>
            <result property="amount" column="amount"/>
            <result property="sort" column="sort"/>
            <result property="deleteFlag" column="delete_flag"/>
        </collection>
    </resultMap>

    <!--    查询工资发薪表-->
    <select id="selectSalaryPayBySalaryPayId"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT salary_pay_id,
        employee_id,
        pay_year,
        pay_month,
        salary_amount,
        allowance_amount,
        welfare_amount,
        bonus_amount,
        withhold_remit_tax,
        other_deductions,
        pay_amount,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM salary_pay
        WHERE salary_pay_id = #{salaryPayId}
        and delete_flag = 0
        ORDER BY create_time DESC
    </select>

    <!--    批量查询工资发薪表-->
    <select id="selectSalaryPayBySalaryPayIds"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT
        sp.salary_pay_id,
        sp.employee_id,
        sp.pay_year,
        sp.pay_month,
        CONCAT(sp.pay_year,'/',RIGHT(CONCAT('0',sp.pay_month),2)) as pay_year_month,
        sp.salary_amount,
        sp.allowance_amount,
        sp.welfare_amount,
        sp.bonus_amount,
        sp.withhold_remit_tax,
        sp.other_deductions,
        sp.pay_amount,
        sp.delete_flag,
        sp.create_by,
        sp.create_time,
        sp.update_by,
        sp.update_time
        FROM salary_pay sp
        WHERE sp.salary_pay_id in
        <foreach item="item"
                 collection="salaryPayIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        and sp.delete_flag=0
    </select>

    <!--    查询工资发薪表列表 payYearMonth -->
    <select id="selectSalaryPayList" resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT
        sp.salary_pay_id,
        sp.employee_id,
        CONCAT(sp.pay_year,'/',RIGHT(CONCAT('0',sp.pay_month),2)) as pay_year_month,
        sp.pay_year,
        sp.pay_month,
        IFNULL(sp.salary_amount, 0) as salary_amount,
        IFNULL(sp.allowance_amount, 0) as allowance_amount,
        IFNULL(sp.welfare_amount, 0) as welfare_amount,
        IFNULL(sp.bonus_amount, 0) as bonus_amount,
        IFNULL(sp.withhold_remit_tax, 0) as withhold_remit_tax,
        IFNULL(sp.other_deductions, 0) as other_deductions,
        IFNULL(sp.pay_amount, 0) as pay_amount,
        sp.delete_flag,
        sp.create_by,
        sp.create_time,
        sp.update_by,
        sp.update_time
        FROM salary_pay sp
        WHERE sp.delete_flag=0
        <if test="salaryPay.salaryPayId != null">
            and sp.salary_pay_id=#{salaryPay.salaryPayId}
        </if>
        <if test="salaryPay.employeeId != null">
            and sp.employee_id=#{salaryPay.employeeId}
        </if>
        <if test="salaryPay.payYear != null">
            and sp.pay_year=#{salaryPay.payYear}
        </if>
        <if test="salaryPay.payMonth != null">
            and sp.pay_month=#{salaryPay.payMonth}
        </if>
        <if test="salaryPay.salaryAmount != null">
            and sp.salary_amount=#{salaryPay.salaryAmount}
        </if>
        <if test="salaryPay.allowanceAmount != null">
            and sp.allowance_amount=#{salaryPay.allowanceAmount}
        </if>
        <if test="salaryPay.welfareAmount != null">
            and sp.welfare_amount=#{salaryPay.welfareAmount}
        </if>
        <if test="salaryPay.bonusAmount != null">
            and sp.bonus_amount=#{salaryPay.bonusAmount}
        </if>
        <if test="salaryPay.withholdRemitTax != null">
            and sp.withhold_remit_tax=#{salaryPay.withholdRemitTax}
        </if>
        <if test="salaryPay.otherDeductions != null">
            and sp.other_deductions=#{salaryPay.otherDeductions}
        </if>
        <if test="salaryPay.payAmount != null">
            and sp.pay_amount=#{salaryPay.payAmount}
        </if>
        <if test="salaryPay.deleteFlag != null">
            and sp.delete_flag=#{salaryPay.deleteFlag}
        </if>
        <if test="salaryPay.createBy != null">
            and sp.create_by=#{salaryPay.createBy}
        </if>
        <if test="salaryPay.createTime != null">
            and sp.create_time=#{salaryPay.createTime}
        </if>
        <if test="salaryPay.updateBy != null">
            and sp.update_by=#{salaryPay.updateBy}
        </if>
        <if test="salaryPay.updateTime != null">
            and sp.update_time=#{salaryPay.updateTime}
        </if>
        <if test="salaryPay.params.payYearMonth != null">
            and CASE WHEN sp.pay_month &gt; 9 THEN
            CONCAT( sp.pay_year, "/", sp.pay_month )
            WHEN sp.pay_month &lt; 10 THEN CONCAT( sp.pay_year, "/0", sp.pay_month ) END =
            #{salaryPay.params.payYearMonth}
        </if>
        <!--发薪年月-->
        <if test="salaryPay.params.payYearMonthEqual != null and salaryPay.params.payYearMonthEqual.size() > 0">
            AND (CASE
            WHEN sp.pay_month &gt; 9 THEN
            CONCAT( sp.pay_year, "/", sp.pay_month )
            WHEN sp.pay_month &lt; 10 THEN CONCAT( sp.pay_year, "/0", sp.pay_month ) END ) IN
            <foreach item="item"
                     collection="salaryPay.params.payYearMonthEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="salaryPay.params.payYearMonthNotEqual != null and salaryPay.params.payYearMonthNotEqual.size() > 0">
            AND (CASE
            WHEN sp.pay_month &gt; 9 THEN
            CONCAT( sp.pay_year, "/", sp.pay_month )
            WHEN sp.pay_month &lt; 10 THEN CONCAT( sp.pay_year, "/0", sp.pay_month ) END ) NOT IN
            <foreach item="item"
                     collection="salaryPay.params.payYearMonthNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="salaryPay.params.payYearMonthBefore != null and salaryPay.params.payYearMonthBefore != ''">
            AND (CASE
            WHEN sp.pay_month &gt; 9 THEN
            CONCAT( sp.pay_year, "/", sp.pay_month )
            WHEN sp.pay_month &lt; 10 THEN CONCAT( sp.pay_year, "/0", sp.pay_month ) END ) &lt;
            #{salaryPay.params.payYearMonthBefore}
        </if>
        <if test="salaryPay.params.payYearMonthNotBefore != null and salaryPay.params.payYearMonthNotBefore != ''">
            AND (CASE
            WHEN sp.pay_month &gt; 9 THEN
            CONCAT( sp.pay_year, "/", sp.pay_month )
            WHEN sp.pay_month &lt; 10 THEN CONCAT( sp.pay_year, "/0", sp.pay_month ) END ) &gt;=
            #{salaryPay.params.payYearMonthNotBefore}
        </if>
        <if test="salaryPay.params.payYearMonthAfter != null and salaryPay.params.payYearMonthAfter != ''">
            AND (CASE
            WHEN sp.pay_month &gt; 9 THEN
            CONCAT( sp.pay_year, "/", sp.pay_month )
            WHEN sp.pay_month &lt; 10 THEN CONCAT( sp.pay_year, "/0", sp.pay_month ) END ) &gt;
            #{salaryPay.params.payYearMonthAfter}
        </if>
        <if test="salaryPay.params.payYearMonthNotAfter != null and salaryPay.params.payYearMonthNotAfter != ''">
            AND (CASE
            WHEN sp.pay_month &gt; 9 THEN
            CONCAT( sp.pay_year, "/", sp.pay_month )
            WHEN sp.pay_month &lt; 10 THEN CONCAT( sp.pay_year, "/0", sp.pay_month ) END ) &lt;=
            #{salaryPay.params.payYearMonthNotAfter}
        </if>
        <if test="salaryPay.params.payYearMonthStart != null and salaryPay.params.payYearMonthStart != ''">
            AND (CASE
            WHEN sp.pay_month &gt; 9 THEN
            CONCAT( sp.pay_year, "/", sp.pay_month )
            WHEN sp.pay_month &lt; 10 THEN CONCAT( sp.pay_year, "/0", sp.pay_month ) END ) &gt;=
            #{salaryPay.params.payYearMonthStart}
        </if>
        <if test="salaryPay.params.payYearMonthEnd != null and salaryPay.params.payYearMonthEnd != ''">
            AND (CASE
            WHEN sp.pay_month &gt; 9 THEN
            CONCAT( sp.pay_year, "/", sp.pay_month )
            WHEN sp.pay_month &lt; 10 THEN CONCAT( sp.pay_year, "/0", sp.pay_month ) END ) &lt;=
            #{salaryPay.params.payYearMonthEnd}
        </if>
        <!--总计（工资+津贴+福利+奖金）-->
        <if test="salaryPay.params.totalAmountEqual != null and salaryPay.params.totalAmountEqual.size() > 0">
            AND
            IFNULL(sp.salary_amount,0)+IFNULL(sp.allowance_amount,0)+IFNULL(sp.welfare_amount,0)+IFNULL(sp.bonus_amount,0)
            IN
            <foreach item="item"
                     collection="salaryPay.params.totalAmountEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="salaryPay.params.totalAmountNotEqual != null and salaryPay.params.totalAmountNotEqual.size() > 0">
            AND
            IFNULL(sp.salary_amount,0)+IFNULL(sp.allowance_amount,0)+IFNULL(sp.welfare_amount,0)+IFNULL(sp.bonus_amount,0)
            NOT
            IN
            <foreach item="item"
                     collection="salaryPay.params.totalAmountNotEqual"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="salaryPay.params.totalAmountGreaterThan != null and salaryPay.params.totalAmountGreaterThan != ''">
            AND
            IFNULL(sp.salary_amount,0)+IFNULL(sp.allowance_amount,0)+IFNULL(sp.welfare_amount,0)+IFNULL(sp.bonus_amount,0)
            &gt;
            #{salaryPay.params.totalAmountGreaterThan}
        </if>
        <if test="salaryPay.params.totalAmountNotGreaterThan != null and salaryPay.params.totalAmountNotGreaterThan != ''">
            AND
            IFNULL(sp.salary_amount,0)+IFNULL(sp.allowance_amount,0)+IFNULL(sp.welfare_amount,0)+IFNULL(sp.bonus_amount,0)
            &lt;=
            #{salaryPay.params.totalAmountNotGreaterThan}
        </if>
        <if test="salaryPay.params.totalAmountLessThan != null and salaryPay.params.totalAmountLessThan != ''">
            AND
            IFNULL(sp.salary_amount,0)+IFNULL(sp.allowance_amount,0)+IFNULL(sp.welfare_amount,0)+IFNULL(sp.bonus_amount,0)
            &lt;
            #{salaryPay.params.totalAmountLessThan}
        </if>
        <if test="salaryPay.params.totalAmountNotLessThan != null and salaryPay.params.totalAmountNotLessThan != ''">
            AND
            IFNULL(sp.salary_amount,0)+IFNULL(sp.allowance_amount,0)+IFNULL(sp.welfare_amount,0)+IFNULL(sp.bonus_amount,0)
            &gt;=
            #{salaryPay.params.totalAmountNotLessThan}
        </if>
        <!--    员工高级搜索-->
        <if test="salaryPay.params.employeeIds != null and salaryPay.params.employeeIds.size() > 0">
            AND sp.employee_id IN
            <foreach item="item"
                     collection="salaryPay.params.employeeIds"
                     index="index" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <!-- 数据范围过滤 -->
        ${salaryPay.params.dataScope}
        ORDER BY sp.pay_year,sp.pay_month
    </select>
    <!--根据人员ID集合查找工资发薪信息-->
    <select id="selectSalaryPayByEmployeeIds"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT
        salary_pay_id, employee_id, pay_year, pay_month, salary_amount, allowance_amount, welfare_amount, bonus_amount,
        withhold_remit_tax, other_deductions, pay_amount, delete_flag, create_by, create_time, update_by, update_time
        FROM salary_pay
        WHERE delete_flag=0
        AND employee_id IN
        <foreach collection="employeeIds" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
        ORDER BY pay_year,pay_month
    </select>
    <!--同一年的多个月-->
    <select id="selectSalaryPayBySomeMonth"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT salary_pay_id,
        employee_id,
        pay_year,
        pay_month,
        salary_amount,
        allowance_amount,
        welfare_amount,
        bonus_amount,
        withhold_remit_tax,
        other_deductions,
        pay_amount,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM salary_pay
        WHERE delete_flag = 0
        <if test="payYear != null">
            AND pay_year = #{payYear}
        </if>
        <if test="startMonth != null and endMonth != null ">
            AND pay_month
            BETWEEN #{startMonth}
            AND #{endMonth}
        </if>
    </select>
    <!--多个年份的所有-->
    <select id="selectSalaryPayBySomeYear"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT salary_pay_id,
        employee_id,
        pay_year,
        pay_month,
        salary_amount,
        allowance_amount,
        welfare_amount,
        bonus_amount,
        withhold_remit_tax,
        other_deductions,
        pay_amount,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM salary_pay
        WHERE pay_year
        BETWEEN #{startYear}
        AND #{endYear}
        AND delete_flag = 0
    </select>
    <!--    根据人员ID集合和年份查找工资发薪信息-->
    <select id="selectSalaryPayByBudggetEmployeeId"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT
        ifnull(salary_amount+allowance_amount+welfare_amount,0) as payAmountSum,
        salary_pay_id, employee_id, pay_year, pay_month, salary_amount, allowance_amount, welfare_amount, bonus_amount,
        withhold_remit_tax, other_deductions, pay_amount, delete_flag, create_by, create_time, update_by, update_time
        FROM salary_pay
        WHERE delete_flag=0
        AND employee_id =#{employeeId}
        AND pay_year &lt;=#{payYear}
        order by pay_year desc,pay_month desc
        limit 12
    </select>
    <!--    当前月份倒推12个月的“奖金”部分合计-->
    <select id="selectBonusActualNum" resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT
            sp.salary_pay_id,
            sp.employee_id,
            sp.pay_year,
            sp.pay_month,
            sp.salary_amount,
            sp.allowance_amount,
            sp.welfare_amount,
            sp.bonus_amount,
            sp.withhold_remit_tax,
            sp.other_deductions,
            sp.pay_amount
        from salary_pay sp
        WHERE sp.pay_year &lt;= #{budgetYear}
          and sp.delete_flag = 0
        ORDER by pay_year desc, pay_month desc
    </select>
    <!--    返回上年总工资包实际数：从月度工资数据管理取值（总计值）-->
    <select id="selectSalaryBounsAmount" resultType="java.math.BigDecimal">
        SELECT IFNULL(SUM(bonus_amount), 0) as pay_amount
        FROM salary_pay
        WHERE pay_year = #{budgetYear} -1
        and delete_flag = 0
    </select>
    <!--    根据人员ID集合和年份查找工资发薪信息-->
    <select id="selectSalaryPayByEmployeeIdsAndPayYear"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT
        salary_pay_id, employee_id, pay_year, pay_month, salary_amount, allowance_amount, welfare_amount, bonus_amount,
        withhold_remit_tax, other_deductions, pay_amount, delete_flag, create_by, create_time, update_by, update_time
        FROM salary_pay
        WHERE delete_flag=0
        AND employee_id IN
        <foreach collection="employeeIds" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
        AND pay_year=#{payYear}
    </select>
    <!--    根据人员ID和年份查找工资发薪信息-->
    <select id="selectSalaryPayByEmployeeIdAndPayYear"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT salary_pay_id,
        employee_id,
        pay_year,
        pay_month,
        salary_amount,
        allowance_amount,
        welfare_amount,
        bonus_amount,
        withhold_remit_tax,
        other_deductions,
        pay_amount,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM salary_pay
        WHERE delete_flag = 0
        AND employee_id = #{employeeId}
        AND pay_year = #{payYear}
    </select>
    <!--    部门奖金预算 某职级的平均薪酬：从月度工资管理取数，取数范围为倒推12个月的数据（年工资）-->
    <select id="selectDeptAnnualBonusBudgetPay" resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT sp.salary_amount + sp.allowance_amount + sp.welfare_amount + sp.bonus_amount as paymentBonus,
        sp.salary_amount + sp.allowance_amount + sp.welfare_amount as salaryPackageBonus,
        bonus_amount as amountBonus,
        sp.salary_pay_id,
        sp.employee_id,
        sp.pay_year,
        sp.pay_month,
        sp.salary_amount,
        sp.allowance_amount,
        sp.welfare_amount,
        sp.bonus_amount,
        sp.withhold_remit_tax,
        sp.other_deductions,
        sp.pay_amount,
        sp.delete_flag,
        sp.create_by,
        sp.create_time,
        sp.update_by,
        sp.update_time
        FROM salary_pay sp
        where sp.pay_year &lt;= #{payYear}
        and sp.pay_month &lt; DATE_FORMAT(NOW(), '%m')
        and sp.employee_id = #{employeeId}
        and sp.delete_flag = 0
        and (SELECT sum(sp.salary_amount + sp.allowance_amount + sp.welfare_amount + sp.bonus_amount as paymentBonus)
        FROM salary_pay sp
        where sp.pay_year &lt;= #{payYear}
        and sp.pay_month &lt; DATE_FORMAT(NOW(), '%m')
        and sp.employee_id = #{employeeId}
        and sp.delete_flag = 0
        and sp.tenant_id=#{tenantId}
        ORDER BY sp.pay_year DESC, sp.pay_month DESC
        limit 12)
        > sp.pay_amount
        ORDER BY sp.pay_year DESC, sp.pay_month DESC limit 12
    </select>
    <!--根据年份 月份 员工ID查询发薪表-->
    <select id="selectSalaryPayByYearAndMonth"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT salary_pay_id,
        employee_id,
        pay_year,
        pay_month,
        salary_amount,
        allowance_amount,
        welfare_amount,
        bonus_amount,
        withhold_remit_tax,
        other_deductions,
        pay_amount,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM salary_pay
        WHERE delete_flag = 0
        AND employee_id = #{employeeId}
        AND pay_year = #{year}
        AND pay_month = #{month}
    </select>

    <select id="selectSalaryPayOfEmployeeIdAndPayYears"
            resultMap="SalaryPayAndDetails">
        SELECT
        sp.salary_pay_id,
        sp.employee_id,
        sp.pay_year,
        sp.pay_month,
        sp.salary_amount,
        sp.allowance_amount,
        sp.welfare_amount,
        sp.bonus_amount,
        sp.withhold_remit_tax,
        sp.other_deductions,
        sp.pay_amount,
        sp.delete_flag,
        sp.create_by,
        sp.create_time,
        sp.update_by,
        sp.update_time,
        spd.salary_pay_details_id,
        spd.salary_pay_id,
        spd.salary_item_id,
        spd.amount,
        spd.sort,
        spd.delete_flag
        FROM salary_pay sp
        LEFT JOIN salary_pay_details spd ON spd.salary_pay_id=sp.salary_pay_id AND spd.delete_flag = 0
        WHERE sp.delete_flag = 0
        AND sp.employee_id = #{employeeId}
        AND sp.pay_year IN
        <foreach item="item"
                 collection="payYears"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>


    <select id="selectSalaryPayOfEmployeeIdsAndPayYears"
            resultMap="SalaryPayAndDetails">
        SELECT
        sp.salary_pay_id,
        sp.employee_id,
        sp.pay_year,
        sp.pay_month,
        sp.salary_amount,
        sp.allowance_amount,
        sp.welfare_amount,
        sp.bonus_amount,
        sp.withhold_remit_tax,
        sp.other_deductions,
        sp.pay_amount,
        sp.delete_flag,
        sp.create_by,
        sp.create_time,
        sp.update_by,
        sp.update_time,
        spd.salary_pay_details_id,
        spd.salary_pay_id,
        spd.salary_item_id,
        spd.amount,
        spd.sort,
        spd.delete_flag
        FROM salary_pay sp
        LEFT JOIN salary_pay_details spd ON spd.salary_pay_id=sp.salary_pay_id AND spd.delete_flag = 0
        WHERE sp.delete_flag = 0
        AND sp.employee_id IN
        <foreach item="item"
                 collection="employeeIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND sp.pay_year IN
        <foreach item="item"
                 collection="payYears"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </select>


    <!--    个人年终奖最近三年的薪酬情况-->
    <select id="selectSalaryPayCondition"
            resultType="net.qixiaowei.operate.cloud.api.dto.bonus.EmpAnnualBonusSnapshotDTO">
        SELECT sp.employee_id,
        sp.pay_year,
        sp.pay_month,
        IFNULL(sp1.bonusBeforeTwo,0) as bonusBeforeTwo,
        IFNULL(sp2.bonusBeforeOne,0) as bonusBeforeOne,
        IFNULL(sp3.emolumentBeforeOne,0) as emolumentBeforeOne,
        IFNULL(sp4.employeeBasicWage,0) as employeeBasicWage
        FROM salary_pay sp
        left join (select * from (
        select employee_id ,
        sum(bonus_amount) AS bonusBeforeTwo,
        pay_year,
        pay_month
        FROM
        salary_pay
        WHERE
        pay_year = #{payYear} -2
        AND delete_flag = 0
        and employee_id in
        <foreach item="item"
                 collection="employeeIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        order by pay_year desc, pay_month desc,employee_id asc limit ${employeeIds.size})spOne group by
        spOne.employee_id ) sp1
        on sp1.employee_id = sp.employee_id
        left join ( select * from (
        SELECT
        employee_id ,
        sum(bonus_amount) AS bonusBeforeOne,
        pay_year,
        pay_month
        FROM
        salary_pay
        WHERE
        pay_year = #{payYear} -1
        AND delete_flag = 0
        and employee_id in
        <foreach item="item"
                 collection="employeeIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>

        order by pay_year desc, pay_month desc,employee_id asc limit ${employeeIds.size}
        ) spTwo group by spTwo.employee_id) sp2
        on sp2.employee_id = sp.employee_id
        left join (select * from (SELECT
        employee_id ,
        sum(pay_amount) AS emolumentBeforeOne,
        pay_year,
        pay_month
        FROM
        salary_pay
        WHERE
        pay_year = #{payYear} -1
        AND delete_flag = 0
        and employee_id in
        <foreach item="item"
                 collection="employeeIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        order by pay_year desc, pay_month desc,employee_id asc limit ${employeeIds.size}) spThree group by
        spThree.employee_id) sp3
        on sp3.employee_id = sp.employee_id
        left join (select * from (SELECT
        employee_id,
        salary_amount AS employeeBasicWage,
        pay_year,
        pay_month
        FROM
        salary_pay
        WHERE delete_flag = 0
        and employee_id in
        <foreach item="item"
                 collection="employeeIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        order by pay_year desc, pay_month desc,employee_id asc limit ${employeeIds.size}) spFour group by
        spFour.employee_id) sp4
        on sp4.employee_id = sp.employee_id
        WHERE sp.employee_id in
        <foreach item="item"
                 collection="employeeIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
        AND sp.delete_flag = 0
        GROUP BY sp.employee_id
    </select>
    <!--    员工倒推12个月的薪酬合计和奖金合计-->
    <select id="selectSalaryPaySumAndBonusSum"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT sum(pay_amount) as paymentBonusSum,
        sum(bonus_amount) as bonusAmountSum
        FROM salary_pay sp
        where sp.employee_id = #{employeeId}
        and sp.delete_flag = 0
        ORDER BY sp.pay_year DESC, sp.pay_month DESC limit 12
    </select>
    <!--当前月份倒推12个月的工资总计-->
    <select id="selectSalaryAmountNum"
            resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDetailsDTO">
        SELECT
        spd.amount,
        sp.pay_year,
        sp.pay_month,
        sp.employee_id
        from salary_pay_details spd
        LEFT JOIN salary_pay sp
        ON spd.salary_pay_id = sp.salary_pay_id
        AND sp.delete_flag = 0
        LEFT JOIN salary_item si
        ON si.salary_item_id = spd.salary_item_id
        AND si.delete_flag = 0
        WHERE
        spd.delete_flag = 0
        and sp.pay_year &lt;= #{budgetYear}
        and sp.employee_id in
        <foreach collection="employeeIds" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
        and si.third_level_item = '基本工资'
        ORDER by pay_year desc, pay_month desc
    </select>
    <select id="selectSalaryPayAmoutNum" resultType="java.math.BigDecimal">
        SELECT IFNULL(SUM(salary_amount+allowance_amount+welfare_amount), 0) as pay_amount
        FROM salary_pay
        WHERE pay_year = #{budgetYear} -1
        and delete_flag = 0
    </select>
    <!--    部门奖金预算 某职级的平均薪酬：从月度工资管理取数，对于当前及未来年份取数范围为倒推12个月的数据（年工资）  对于历史年份取一整年数据-->
    <select id="selectDeptBonusBudgetPay" resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT sp.salary_amount + sp.allowance_amount + sp.welfare_amount + sp.bonus_amount as paymentBonus,
        sp.salary_amount + sp.allowance_amount + sp.welfare_amount as salaryPackageBonus,
        bonus_amount as amountBonus,
        sp.salary_pay_id,
        sp.employee_id,
        sp.pay_year,
        sp.pay_month,
        sp.salary_amount,
        sp.allowance_amount,
        sp.welfare_amount,
        sp.bonus_amount,
        sp.withhold_remit_tax,
        sp.other_deductions,
        sp.pay_amount,
        sp.delete_flag,
        sp.create_by,
        sp.create_time,
        sp.update_by,
        sp.update_time
        FROM salary_pay sp
        where
        sp.employee_id = #{employeeId}
        and sp.delete_flag = 0
        and (select sum(sp2.bonus_amount) from (SELECT sp.bonus_amount
        FROM salary_pay sp
        where
        sp.employee_id = #{employeeId}
        and sp.delete_flag = 0
        and sp.tenant_id=#{tenantId}
        ORDER BY sp.pay_year DESC, sp.pay_month DESC
        limit 12) sp2) > (select sum(sp3.salary_amount)/count(sp3.salary_amount) from (SELECT sp.salary_amount
        FROM salary_pay sp
        where
        sp.employee_id = #{employeeId}
        and sp.delete_flag = 0
        and sp.tenant_id=#{tenantId}
        ORDER BY sp.pay_year DESC, sp.pay_month DESC
        limit 12) sp3)
        <if test="payYear &lt;  nowYear">
            and sp.pay_year = #{payYear}
        </if>
        <if test="payYear >=  nowYear">
            ORDER BY sp.pay_year DESC, sp.pay_month DESC limit 12
        </if>
    </select>
    <!--根据员工ID查询工资条-->
    <select id="selectByEmployeeId" resultType="net.qixiaowei.operate.cloud.api.dto.salary.SalaryPayDTO">
        SELECT salary_pay_id,
        employee_id,
        pay_year,
        pay_month,
        salary_amount,
        allowance_amount,
        welfare_amount,
        bonus_amount,
        withhold_remit_tax,
        other_deductions,
        pay_amount,
        delete_flag,
        create_by,
        create_time,
        update_by,
        update_time
        FROM salary_pay
        WHERE employee_id = #{employeeId}
        and delete_flag = 0
        GROUP BY employee_id
    </select>
<!--    对于历史年份，取历史年份对应整年的奖金数据-->
    <select id="selectAfterYearBonusActualNum" resultType="java.math.BigDecimal">
        SELECT SUM(bonus_amount) as bonus_actual_sum
        from salary_pay sp
        WHERE sp.pay_year = #{year}
          and sp.delete_flag = 0
        ORDER by pay_year desc, pay_month desc
    </select>
    <!--新增工资发薪表-->
    <insert id="insertSalaryPay" useGeneratedKeys="true" keyProperty="salaryPayId">
        INSERT INTO salary_pay
        (employee_id, pay_year, pay_month, salary_amount, allowance_amount, welfare_amount, bonus_amount,
        withhold_remit_tax, other_deductions, pay_amount, delete_flag, create_by, create_time, update_by, update_time)
        VALUES (#{salaryPay.employeeId}, #{salaryPay.payYear}, #{salaryPay.payMonth}, #{salaryPay.salaryAmount},
        #{salaryPay.allowanceAmount}, #{salaryPay.welfareAmount}, #{salaryPay.bonusAmount},
        #{salaryPay.withholdRemitTax}, #{salaryPay.otherDeductions}, #{salaryPay.payAmount},
        #{salaryPay.deleteFlag}, #{salaryPay.createBy}, #{salaryPay.createTime}, #{salaryPay.updateBy},
        #{salaryPay.updateTime})
    </insert>
    <!--修改工资发薪表-->
    <update id="updateSalaryPay">
        UPDATE salary_pay
        SET
        <if test="salaryPay.employeeId != null">
            employee_id=#{salaryPay.employeeId},
        </if>
        <if test="salaryPay.payYear != null">
            pay_year=#{salaryPay.payYear},
        </if>
        <if test="salaryPay.payMonth != null">
            pay_month=#{salaryPay.payMonth},
        </if>
        <if test="salaryPay.salaryAmount != null">
            salary_amount=#{salaryPay.salaryAmount},
        </if>
        <if test="salaryPay.allowanceAmount != null">
            allowance_amount=#{salaryPay.allowanceAmount},
        </if>
        <if test="salaryPay.welfareAmount != null">
            welfare_amount=#{salaryPay.welfareAmount},
        </if>
        <if test="salaryPay.bonusAmount != null">
            bonus_amount=#{salaryPay.bonusAmount},
        </if>
        <if test="salaryPay.withholdRemitTax != null">
            withhold_remit_tax=#{salaryPay.withholdRemitTax},
        </if>
        <if test="salaryPay.otherDeductions != null">
            other_deductions=#{salaryPay.otherDeductions},
        </if>
        <if test="salaryPay.payAmount != null">
            pay_amount=#{salaryPay.payAmount},
        </if>
        <if test="salaryPay.deleteFlag != null">
            delete_flag=#{salaryPay.deleteFlag},
        </if>
        <if test="salaryPay.createBy != null">
            create_by=#{salaryPay.createBy},
        </if>
        <if test="salaryPay.createTime != null">
            create_time=#{salaryPay.createTime},
        </if>
        <if test="salaryPay.updateBy != null">
            update_by=#{salaryPay.updateBy},
        </if>
        <if test="salaryPay.updateTime != null">
            update_time=#{salaryPay.updateTime}
        </if>
        WHERE
        salary_pay_id=#{salaryPay.salaryPayId}
    </update>
    <!--逻辑删除工资发薪表-->
    <update id="logicDeleteSalaryPayBySalaryPayId">
        UPDATE salary_pay
        SET delete_flag= 1,
        update_by=#{salaryPay.updateBy},
        update_time=#{salaryPay.updateTime}
        WHERE salary_pay_id = #{salaryPay.salaryPayId}
    </update>
    <!--逻辑批量删除工资发薪表-->
    <update id="logicDeleteSalaryPayBySalaryPayIds">
        UPDATE salary_pay
        SET delete_flag= 1,
        update_by=#{updateBy},
        update_time=#{updateTime}
        WHERE
        salary_pay_id IN
        <foreach item="item"
                 collection="salaryPayIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </update>
    <!--批量新增工资发薪表-->
    <insert id="batchSalaryPay" useGeneratedKeys="true" keyProperty="salaryPayId">
        INSERT INTO salary_pay
        (employee_id,pay_year,pay_month,salary_amount,allowance_amount,welfare_amount,bonus_amount,withhold_remit_tax,other_deductions,pay_amount,delete_flag,create_by,create_time,update_by,update_time)
        VALUES
        <foreach item="item" index="index"
                 collection="salaryPays"
                 separator=",">
            (#{item.employeeId},#{item.payYear},#{item.payMonth},#{item.salaryAmount},#{item.allowanceAmount},#{item.welfareAmount},#{item.bonusAmount},#{item.withholdRemitTax},#{item.otherDeductions},#{item.payAmount},#{item.deleteFlag},#{item.createBy},#{item.createTime},#{item.updateBy},#{item.updateTime})
        </foreach>
    </insert>

    <!--物理删除工资发薪表-->
    <delete id="deleteSalaryPayBySalaryPayId">
        DELETE
        FROM salary_pay
        WHERE salary_pay_id = #{salaryPay}

    </delete>
    <!--物理批量删除工资发薪表-->
    <delete id="deleteSalaryPayBySalaryPayIds">
        DELETE FROM salary_pay
        WHERE salary_pay_id IN
        <foreach item="item"
                 collection="salaryPayIds"
                 index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>
    <!--批量修改工资发薪表-->
    <update id="updateSalaryPays">
        update salary_pay
        <trim prefix="set" suffixOverrides=",">
            <trim prefix="employee_id=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.employeeId != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.employeeId}
                    </if>
                </foreach>
            </trim>
            <trim prefix="pay_year=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.payYear != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.payYear}
                    </if>
                </foreach>
            </trim>
            <trim prefix="pay_month=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.payMonth != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.payMonth}
                    </if>
                </foreach>
            </trim>
            <trim prefix="salary_amount=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.salaryAmount != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.salaryAmount}
                    </if>
                </foreach>
            </trim>
            <trim prefix="allowance_amount=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.allowanceAmount != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.allowanceAmount}
                    </if>
                </foreach>
            </trim>
            <trim prefix="welfare_amount=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.welfareAmount != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.welfareAmount}
                    </if>
                </foreach>
            </trim>
            <trim prefix="bonus_amount=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.bonusAmount != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.bonusAmount}
                    </if>
                </foreach>
            </trim>
            <trim prefix="withhold_remit_tax=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.withholdRemitTax != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.withholdRemitTax}
                    </if>
                </foreach>
            </trim>
            <trim prefix="other_deductions=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.otherDeductions != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.otherDeductions}
                    </if>
                </foreach>
            </trim>
            <trim prefix="pay_amount=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.payAmount != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.payAmount}
                    </if>
                </foreach>
            </trim>
            <trim prefix="delete_flag=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.deleteFlag != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.deleteFlag}
                    </if>
                </foreach>
            </trim>
            <trim prefix="create_by=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.createBy != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.createBy}
                    </if>
                </foreach>
            </trim>
            <trim prefix="create_time=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.createTime != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.createTime}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_by=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.updateBy != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.updateBy}
                    </if>
                </foreach>
            </trim>
            <trim prefix="update_time=case" suffix="end,">
                <foreach collection="salaryPayList" item="item" index="index">
                    <if test="item.updateTime != null">
                        when salary_pay_id=#{item.salaryPayId} then #{item.updateTime}
                    </if>
                </foreach>
            </trim>
        </trim>
        where
        <foreach collection="salaryPayList" separator="or" item="item" index="index">
            salary_pay_id=#{item.salaryPayId}
        </foreach>
    </update>
</mapper>


